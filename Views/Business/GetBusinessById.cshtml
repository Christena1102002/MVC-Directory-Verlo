@model mvc.Models.Business
@{
    ViewData["Title"] = Model.Name;
    var averageRating = ViewBag.AverageRating ?? 0.0;
    var ratingPercentages = ViewBag.RatingPercentages ?? new Dictionary<int, int>();
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    bool isOwner = !string.IsNullOrEmpty(userId) && userId == Model.OwnerId;
    bool isAdmin = User.IsInRole("Admin");
    bool isAuthenticated = User.Identity?.IsAuthenticated ?? false;

 
    string FormatTimeSpan(TimeSpan timeSpan)
    {
        DateTime dateTime = DateTime.Today.Add(timeSpan);
        return dateTime.ToString("hh:mm tt");
    }
}


<style>
    /* Hero Section */
    .business-hero {
    position: relative;
    background-size: cover;
    background-position: center;
    color: white;
    padding: 0;
    margin-bottom: 2rem;
    height: 400px;
    overflow: hidden;
    }

    .business-hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.7) 100%);
    z-index: 1;
    }

    .business-hero-content {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 2rem;
    z-index: 2;
    }

    .business-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 50px;
    font-size: 0.85rem;
    font-weight: 500;
    margin-bottom: 1rem;
    }

    .business-badge.category {
    background-color: var(--primary-color);
    color: white;
    }

    .business-badge.status {
    margin-left: 0.5rem;
    }

    .business-badge.active {
    background-color: rgba(46, 204, 113, 0.9);
    color: white;
    }

    .business-badge.inactive {
    background-color: rgba(231, 76, 60, 0.9);
    color: white;
    }

    .business-badge.package {
    margin-left: 0.5rem;
    }

    .business-badge.package-1 {
    background-color: rgba(189, 195, 199, 0.9);
    color: #333;
    }

    .business-badge.package-2 {
    background-color: rgba(241, 196, 15, 0.9);
    color: #333;
    }

    .business-badge.package-3 {
    background-color: rgba(52, 152, 219, 0.9);
    color: white;
    }

    .business-hero-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    text-shadow: 0 2px 10px rgba(0,0,0,0.3);
    }

    .business-hero-address {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 1rem;
    opacity: 0.9;
    }

    .business-hero-address i {
    margin-right: 0.5rem;
    }

    .business-rating-large {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
    }

    .business-rating-stars {
    color: #f1c40f;
    font-size: 1.2rem;
    margin-right: 0.75rem;
    }

    .business-rating-count {
    font-size: 0.95rem;
    }

    /* Business action buttons */
    .business-actions {
    position: absolute;
    top: 1.5rem;
    right: 1.5rem;
    z-index: 3;
    display: flex;
    gap: 0.5rem;
    }

    .business-action-btn {
    background-color: white;
    color: var(--secondary-color);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    transition: all 0.2s ease;
    }

    .business-action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }

    .business-action-btn i {
    font-size: 1.1rem;
    }

    /* Main content area */
    .business-main {
    padding-bottom: 4rem;
    }

    .business-section {
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 2px 15px rgba(0,0,0,0.05);
    margin-bottom: 2rem;
    overflow: hidden;
    }

    .business-section-header {
    background-color: #f8f9fa;
    padding: 1.25rem 1.5rem;
    border-bottom: 1px solid #eaeaea;
    }

    .business-section-title {
    font-weight: 700;
    font-size: 1.2rem;
    margin: 0;
    color: var(--secondary-color);
    display: flex;
    align-items: center;
    }

    .business-section-title i {
    margin-right: 0.75rem;
    color: var(--primary-color);
    }

    .business-section-content {
    padding: 1.5rem;
    }

    /* Features section */
    .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    }

    .feature-item {
    display: flex;
    align-items: center;
    }

    .feature-item i {
    color: var(--primary-color);
    margin-right: 0.75rem;
    }

    /* Reviews section */
    .reviews-summary {
    display: flex;
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid #eaeaea;
    }

    .reviews-average {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 0 0 180px;
    border-right: 1px solid #eaeaea;
    padding-right: 2rem;
    margin-right: 2rem;
    }

    .reviews-average-number {
    font-size: 3.5rem;
    font-weight: 700;
    line-height: 1;
    color: var(--secondary-color);
    margin-bottom: 0.5rem;
    }

    .reviews-average-stars {
    color: #f1c40f;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    }

    .reviews-average-count {
    color: #6c757d;
    font-size: 0.95rem;
    }

    .reviews-distribution {
    flex-grow: 1;
    }

    .review-bar {
    display: flex;
    align-items: center;
    margin-bottom: 0.75rem;
    }

    .review-bar-label {
    flex: 0 0 50px;
    display: flex;
    align-items: center;
    }

    .review-bar-label i {
    color: #f1c40f;
    margin-left: 0.25rem;
    }

    .review-bar-progress {
    flex-grow: 1;
    height: 12px;
    background-color: #f1f3f5;
    border-radius: 6px;
    overflow: hidden;
    margin: 0 1rem;
    }

    .review-bar-fill {
    height: 100%;
    background-color: #f1c40f;
    border-radius: 6px;
    }

    .review-bar-percent {
    flex: 0 0 40px;
    font-size: 0.9rem;
    color: #6c757d;
    text-align: right;
    }

    /* Individual review */
    .review-item {
    padding: 1.5rem 0;
    border-bottom: 1px solid #eaeaea;
    }

    .review-item:last-child {
    border-bottom: none;
    }

    .review-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.75rem;
    }

    .reviewer-info {
    display: flex;
    align-items: center;
    }

    .reviewer-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-color: #f0f0f0;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    font-size: 1.25rem;
    color: #6c757d;
    }

    .reviewer-name {
    font-weight: 600;
    font-size: 1.1rem;
    color: var(--secondary-color);
    margin-bottom: 0.25rem;
    }

    .review-date {
    font-size: 0.85rem;
    color: #6c757d;
    }

    .review-rating {
    color: #f1c40f;
    margin-bottom: 0.75rem;
    }

    .review-content {
    margin-bottom: 0.5rem;
    line-height: 1.6;
    }

    .review-actions {
    display: flex;
    justify-content: flex-end;
    gap: 0.75rem;
    }

    .review-action-btn {
    border: none;
    background: none;
    font-size: 0.85rem;
    color: #6c757d;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    }

    .review-action-btn i {
    margin-right: 0.4rem;
    }

    .review-action-btn:hover {
    color: var(--primary-color);
    }

    /* Contact and info section */
    .contact-item {
    display: flex;
    align-items: center;
    margin-bottom: 1.25rem;
    }

    .contact-item i {
    width: 36px;
    height: 36px;
    min-width: 36px;
    border-radius: 50%;
    background-color: var(--primary-light);
    color: var(--primary-color);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    }

    .contact-item-content {
    flex-grow: 1;
    }

    .contact-item-label {
    font-size: 0.85rem;
    color: #6c757d;
    margin-bottom: 0.25rem;
    }

    .contact-item-value {
    font-weight: 500;
    }

    .contact-item-value a {
    color: var(--secondary-color);
    text-decoration: none;
    transition: all 0.2s ease;
    }

    .contact-item-value a:hover {
    color: var(--primary-color);
    }

    .upgrade-badge {
    display: inline-flex;
    align-items: center;
    background-color: #f8f9fa;
    color: #6c757d;
    padding: 0.4rem 0.75rem;
    border-radius: 4px;
    font-size: 0.85rem;
    margin-top: 0.5rem;
    }

    .upgrade-badge i {
    margin-right: 0.4rem;
    color: var(--primary-color);
    }

    /* Hours section */
    .business-hours-table {
    width: 100%;
    }

    .business-hours-table tr td {
    padding: 0.75rem 0;
    border-bottom: 1px solid #f0f0f0;
    }

    .business-hours-table tr:last-child td {
    border-bottom: none;
    }

    .business-hours-day {
    font-weight: 500;
    color: var(--secondary-color);
    }

    .business-hours-time {
    text-align: right;
    color: #6c757d;
    }

    .hours-today {
    color: var(--primary-color);
    font-weight: 700;
    }

    .hours-closed {
    color: #e74c3c;
    }

    /* Review form */
    .review-form-header {
    display: flex;
    align-items: center;
    margin-bottom: 1.5rem;
    }

    .review-form-title {
    font-weight: 600;
    font-size: 1.2rem;
    margin: 0;
    color: var(--secondary-color);
    }

    .rating-input {
    display: flex;
    flex-direction: row-reverse;
    justify-content: flex-end;
    margin-bottom: 1.5rem;
    }

    .rating-input input {
    display: none;
    }

    .rating-input label {
    cursor: pointer;
    color: #ddd;
    font-size: 1.75rem;
    padding: 0 0.1rem;
    transition: all 0.2s ease;
    }

    .rating-input label:hover,
    .rating-input label:hover ~ label,
    .rating-input input:checked ~ label {
    color: #f1c40f;
    }

    .review-form-footer {
    display: flex;
    justify-content: flex-end;
    margin-top: 1.5rem;
    }

    .map-container {
    height: 250px;
    border-radius: 8px;
    overflow: hidden;
    }

    /* Owner section */
    .owner-card {
    display: flex;
    padding: 1.5rem;
    border-radius: 12px;
    background-color: #f8f9fa;
    margin-bottom: 1.5rem;
    }

    .owner-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1.5rem;
    font-size: 2rem;
    color: #6c757d;
    }

    .owner-info {
    flex-grow: 1;
    }

    .owner-name {
    font-weight: 600;
    font-size: 1.25rem;
    color: var(--secondary-color);
    margin-bottom: 0.4rem;
    }

    .owner-title {
    color: #6c757d;
    margin-bottom: 0.75rem;
    font-size: 0.95rem;
    }

    .owner-stats {
    display: flex;
    gap: 1.5rem;
    margin-top: 1rem;
    }

    .owner-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    }

    .owner-stat-value {
    font-weight: 700;
    font-size: 1.2rem;
    color: var(--primary-color);
    }

    .owner-stat-label {
    font-size: 0.85rem;
    color: #6c757d;
    }
</style>

<!-- Hero Section -->
<section class="business-hero" style="background-image: url('@(string.IsNullOrEmpty(Model.MainImage) ? "/images/default-business.jpg" : Model.MainImage)')">
    <div class="business-hero-overlay"></div>

    <div class="business-actions">
        @if (isOwner || isAdmin)
        {
            <a href="@Url.Action("Edit", "Business", new { id = Model.Id })" class="business-action-btn" title="Edit Business">
                <i class="fas fa-edit"></i>
            </a>
        }

        <button class="business-action-btn share-business" title="Share Business" data-share-url="@Url.Action("GetBusinessById", "Business", new { id = Model.Id }, Context.Request.Scheme)">
            <i class="fas fa-share-alt"></i>
        </button>

        @if (isAuthenticated)
        {
            <button class="business-action-btn favorite-business" title="Save to Favorites" data-id="@Model.Id">
                <i class="far fa-heart"></i>
            </button>
        }
    </div>

    <div class="business-hero-content">
        <div class="business-badges">
            <span class="business-badge category">
                <i class="@(Model.Category?.Icon ?? "fas fa-store")"></i> @(Model.Category?.Name ?? "General")
            </span>

            <span class="business-badge status @(Model.IsActive ? "active" : "inactive")">
                @(Model.IsActive ? "Active" : "Inactive")
            </span>

            <span class="business-badge package package-@Model.PackageId">
                @(Model.PackageId == 1 ? "Regular" : Model.PackageId == 2 ? "Premium" : "Featured")
            </span>
        </div>

        <h1 class="business-hero-title">@Model.Name</h1>

        <div class="business-hero-address">
            <i class="fas fa-map-marker-alt"></i>
            <span>@Model.Address</span>
        </div>

        <div class="business-rating-large">
            <div class="business-rating-stars">
                @for (int i = 1; i <= 5; i++)
                {
                    if (i <= Math.Floor(averageRating))
                    {
                        <i class="fas fa-star"></i>
                    }
                    else if (i - averageRating < 1 && i - averageRating > 0)
                    {
                        <i class="fas fa-star-half-alt"></i>
                    }
                    else
                    {
                        <i class="far fa-star"></i>
                    }
                }
            </div>
            <div class="business-rating-count">
                <strong>@averageRating.ToString("0.0")</strong> (@(Model.Reviews?.Count() ?? 0) reviews)
            </div>
        </div>
    </div>
</section>

<!-- Main Content -->
<section class="business-main">
    <div class="container">
        <div class="row">
            <div class="col-lg-8">
                <!-- Description -->
                <div class="business-section">
                    <div class="business-section-header">
                        <h3 class="business-section-title">
                            <i class="fas fa-align-left"></i> About
                        </h3>
                    </div>
                    <div class="business-section-content">
                        <p>@Model.Description</p>
                    </div>
                </div>

                <!-- Features -->
                @if (Model.BusinessFeatures != null && Model.BusinessFeatures.Any())
                {
                    <div class="business-section">
                        <div class="business-section-header">
                            <h3 class="business-section-title">
                                <i class="fas fa-list-ul"></i> Features
                            </h3>
                        </div>
                        <div class="business-section-content">
                            <div class="feature-grid">
                                @foreach (var feature in Model.BusinessFeatures)
                                {
                                    <div class="feature-item">
                                        <i class="fas fa-check-circle"></i>
                                        <span>@feature.Name</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                <!-- Reviews -->
                <div class="business-section" id="reviews-section">
                    <div class="business-section-header">
                        <h3 class="business-section-title">
                            <i class="fas fa-star"></i> Reviews
                        </h3>
                    </div>
                    <div class="business-section-content">
                        <div id="reviewsContainer">
                            @if (Model.Reviews != null && Model.Reviews.Any())
                            {
                                <div class="reviews-summary">
                                    <div class="reviews-average">
                                        <div class="reviews-average-number">@averageRating.ToString("0.0")</div>
                                        <div class="reviews-average-stars">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                if (i <= Math.Floor(averageRating))
                                                {
                                                    <i class="fas fa-star"></i>
                                                }
                                                else if (i - averageRating < 1 && i - averageRating > 0)
                                                {
                                                    <i class="fas fa-star-half-alt"></i>
                                                }
                                                else
                                                {
                                                    <i class="far fa-star"></i>
                                                }
                                            }
                                        </div>
                                        <div class="reviews-average-count">@Model.Reviews.Count() reviews</div>
                                    </div>

                                    <div class="reviews-distribution">
                                        @for (int i = 5; i >= 1; i--)
                                        {
                                            int percentage = ratingPercentages != null && ratingPercentages.ContainsKey(i) ? ratingPercentages[i] : 0;
                                            <div class="review-bar">
                                                <div class="review-bar-label">
                                                    @i <i class="fas fa-star"></i>
                                                </div>
                                                <div class="review-bar-progress">
                                                    <div class="review-bar-fill" style="width: @percentage%"></div>
                                                </div>
                                                <div class="review-bar-percent">@percentage%</div>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="reviews-list">
                                    @foreach (var review in Model.Reviews.OrderByDescending(r => r.CreatedAt))
                                    {
                                        <div class="review-item">
                                            <div class="review-header">
                                                <div class="reviewer-info">
                                                    <div class="reviewer-avatar">
                                                        <i class="fas fa-user"></i>
                                                    </div>
                                                    <div>
                                                        <div class="reviewer-name">@(review.Email?.Split('@').FirstOrDefault() ?? "Anonymous")</div>
                                                        <div class="review-date">@review.CreatedAt.ToString("MMMM dd, yyyy")</div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="review-rating">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    if (i <= review.Rating)
                                                    {
                                                        <i class="fas fa-star"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="far fa-star"></i>
                                                    }
                                                }
                                            </div>

                                            <div class="review-content">
                                                @review.Comment
                                            </div>

                                            @if (isOwner || isAdmin)
                                            {
                                                <div class="review-actions">
                                                    @if (isAdmin)
                                                    {
                                                        <button class="review-action-btn delete-review" data-id="@review.Id" data-business-id="@Model.Id">
                                                            <i class="fas fa-trash-alt"></i> Delete
                                                        </button>
                                                    }

                                                    @if (!review.IsRead)
                                                    {
                                                        <button class="review-action-btn mark-read" data-id="@review.Id">
                                                            <i class="fas fa-check"></i> Mark as Read
                                                        </button>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <div class="mb-3">
                                        <i class="fas fa-star text-muted" style="font-size: 3rem;"></i>
                                    </div>
                                    <h4>No Reviews Yet</h4>
                                    <p class="text-muted">Be the first to leave a review for this business!</p>
                                </div>
                            }
                        </div>

                        <!-- Add a Review Section (for authenticated users) -->
                        @if (isAuthenticated)
                        {
                            <div class="add-review-section mt-4" id="addReviewSection">
                                <div class="review-form-header">
                                    <h4 class="review-form-title">Write a Review</h4>
                                </div>

                                <form id="reviewForm" method="post" action="@Url.Action("Add", "Review")">
                                    <input type="hidden" name="BusinessId" value="@Model.Id" />

                                    <div class="mb-3">
                                        <label for="Email" class="form-label">Email Address</label>
                                        <input type="email" class="form-control" id="Email" name="Email" required 
                                        value="@User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Rating</label>
                                        <div class="rating-input">
                                            @for (int i = 5; i >= 1; i--)
                                            {
                                                <input type="radio" id="rating-@i" name="Rating" value="@i" required />
                                                <label for="rating-@i"><i class="fas fa-star"></i></label>
                                            }
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label for="Comment" class="form-label">Your Review</label>
                                        <textarea class="form-control" id="Comment" name="Comment" rows="4" required></textarea>
                                    </div>

                                    <div class="review-form-footer">
                                        <button type="submit" class="btn btn-primary">Submit Review</button>
                                    </div>
                                </form>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-3 mt-4">
                                <p>Please <a href="@Url.Action("Login", "Account", new { returnUrl = $"/Business/GetBusinessById?id={Model.Id}#addReviewSection" })">sign in</a> to leave a review</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <!-- Owner Information -->
                <div class="business-section">
                    <div class="business-section-header">
                        <h3 class="business-section-title">
                            <i class="fas fa-user"></i> Owner
                        </h3>
                    </div>
                    <div class="business-section-content">
                        <div class="owner-card">
                            <div class="owner-avatar">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="owner-info">
                                <div class="owner-name">@(Model.Owner?.UserName ?? "Business Owner")</div>
                                <div class="owner-title">Business Owner</div>

                                <div class="owner-stats">
                                    @{
                                        var ownerBusinessCount = ViewBag.OwnerBusinessCount ?? 1;
                                        var ownerSince = DateTime.Now;
                                        var memberYears = 1; 
                                    }
                                    <div class="owner-stat">
                                        <div class="owner-stat-value">@ownerBusinessCount</div>
                                        <div class="owner-stat-label">Businesses</div>
                                    </div>
                                    <div class="owner-stat">
                                        <div class="owner-stat-value">@(memberYears > 0 ? memberYears : 1)</div>
                                        <div class="owner-stat-label">@(memberYears != 1 ? "Years" : "Year")</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Contact Information -->
                <div class="business-section">
                    <div class="business-section-header">
                        <h3 class="business-section-title">
                            <i class="fas fa-info-circle"></i> Information
                        </h3>
                    </div>
                    <div class="business-section-content">
                        <div class="contact-item">
                            <i class="fas fa-map-marker-alt"></i>
                            <div class="contact-item-content">
                                <div class="contact-item-label">Address</div>
                                <div class="contact-item-value">@Model.Address</div>
                            </div>
                        </div>

                        @if (Model.PackageId >= 2) // Premium or Featured
                        {
                            <div class="contact-item">
                                <i class="fas fa-phone"></i>
                                <div class="contact-item-content">
                                    <div class="contact-item-label">Phone</div>
                                    <div class="contact-item-value">
                                        <a href="tel:+1234567890">+1 (234) 567-890</a>
                                    </div>
                                </div>
                            </div>

                            <div class="contact-item">
                                <i class="fas fa-envelope"></i>
                                <div class="contact-item-content">
                                    <div class="contact-item-label">Email</div>
                                    <div class="contact-item-value">
                                        <a href="mailto:contact@@example.com">contact@@example.com</a>
                                    </div>
                                </div>
                            </div>

                            <div class="contact-item">
                                <i class="fas fa-globe"></i>
                                <div class="contact-item-content">
                                    <div class="contact-item-label">Website</div>
                                    <div class="contact-item-value">
                                        <a href="https://example.com" target="_blank">example.com</a>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="contact-item">
                                <i class="fas fa-crown"></i>
                                <div class="contact-item-content">
                                    <div class="contact-item-label">Contact Information</div>
                                    <div class="contact-item-value">
                                        <a href="@Url.Action("GetAll", "Package")">Upgrade to Premium</a>
                                        <div class="upgrade-badge">
                                            <i class="fas fa-lock"></i> Available with Premium package
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="mt-4">
                            <div id="business-map" class="map-container"></div>
                        </div>
                    </div>
                </div>

                <!-- Opening Hours -->
                <div class="business-section">
                    <div class="business-section-header">
                        <h3 class="business-section-title">
                            <i class="far fa-clock"></i> Opening Hours
                        </h3>
                    </div>
                    <div class="business-section-content">
                        <table class="business-hours-table">
                            <tbody>
                                @{
                                    var daysOfWeek = new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
                                    var todayName = DateTime.Now.DayOfWeek.ToString();
                                    int dayNumber = 0;
                                    foreach (var day in daysOfWeek)
                                    {
                                        dayNumber++;
                                        var isToday = todayName.Equals(day, StringComparison.OrdinalIgnoreCase);
                                        var openingHour = Model.OpeningHours?.FirstOrDefault(h => h.DayOfWeek == dayNumber);
                                        
                                        <tr>
                                            <td class="business-hours-day @(isToday ? "hours-today" : "")">
                                                @day @(isToday ? "(Today)" : "")
                                            </td>
                                            <td class="business-hours-time @(openingHour?.IsClosed == true ? "hours-closed" : "")">
                                                @if (openingHour != null)
                                                {
                                                    if (openingHour.IsClosed)
                                                    {
                                                        <span>Closed</span>
                                                    }
                                                    else
                                                    {
                                                        <span>@FormatTimeSpan(openingHour.OpenTime.Value) - @FormatTimeSpan(openingHour.CloseTime.Value )</span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span>Not specified</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Delete Review Modal -->
<div class="modal fade" id="deleteReviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this review? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteReview">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
   
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDw6thoxZITqFU-HsZMnUu6p5hy3xc-gv0&callback=initMap" async defer></script>
    
 
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    
    <script>
     
        function initMap() {
            const lat = parseFloat('@Model.Latitude');
            const lng = parseFloat('@Model.Longitude');
            
            if (isNaN(lat) || isNaN(lng)) {
                document.getElementById('business-map').innerHTML = '<div class="alert alert-warning m-0">Location coordinates not available</div>';
                return;
            }
            
            const mapOptions = {
                center: { lat, lng },
                zoom: 15,
                mapTypeControl: false,
                fullscreenControl: false,
                streetViewControl: false
            };
            
            const map = new google.maps.Map(document.getElementById('business-map'), mapOptions);
            
            const marker = new google.maps.Marker({
                position: { lat, lng },
                map: map,
                title: '@Model.Name',
                animation: google.maps.Animation.DROP
            });
            
            const infoWindow = new google.maps.InfoWindow({
                content: '<div style="font-weight:500;padding:5px;">@Model.Name</div>'
            });
            
            marker.addListener('click', () => {
                infoWindow.open(map, marker);
            });
        }
        
        
        document.addEventListener('DOMContentLoaded', function() {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/reviewHub')
                .build();
                
           
            connection.start().catch(err => console.error('Error connecting to SignalR:', err));
            
            
            connection.on('NewReviewArrived', function(review) {
                if (review.businessId === @Model.Id) {
              
                    fetch(`/Review/GetReviewsPartial?businessId=@Model.Id`)
                        .then(response => response.text())
                        .then(html => {
                            document.getElementById('reviewsContainer').innerHTML = html;
                            
                    
                            setupReviewActions();
                        })
                        .catch(error => console.error('Error fetching reviews:', error));
                }
            });
            
          
            const reviewForm = document.getElementById('reviewForm');
            if (reviewForm) {
                reviewForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(this);
                    
                    fetch('/Review/Add', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                           
                            showToast('success', 'Review Submitted', data.message);
                            
                       
                            reviewForm.reset();
                            
                            
                            document.getElementById('reviews-section').scrollIntoView({ behavior: 'smooth' });
                        } else {
                           
                            showToast('error', 'Error', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error submitting review:', error);
                        showToast('error', 'Error', 'An error occurred. Please try again later.');
                    });
                });
            }
            
          
            function setupReviewActions() {
               
                document.querySelectorAll('.mark-read').forEach(button => {
                    button.addEventListener('click', function() {
                        const reviewId = this.getAttribute('data-id');
                        
                        fetch('/Review/MarkAsRead', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ id: reviewId })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                this.remove(); 
                                showToast('success', 'Success', 'Review marked as read');
                            } else {
                                showToast('error', 'Error', data.message || 'Failed to mark review as read');
                            }
                        })
                        .catch(error => {
                            console.error('Error marking review as read:', error);
                            showToast('error', 'Error', 'An error occurred. Please try again.');
                        });
                    });
                });
                

                document.querySelectorAll('.delete-review').forEach(button => {
                    button.addEventListener('click', function() {
                        const reviewId = this.getAttribute('data-id');
                        const businessId = this.getAttribute('data-business-id');
                        
                      
                        const modal = new bootstrap.Modal(document.getElementById('deleteReviewModal'));
                        modal.show();
                        
                        
                        document.getElementById('confirmDeleteReview').onclick = function() {
                            fetch('/Review/Delete', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ id: reviewId, businessId: businessId })
                            })
                            .then(response => {
                                if (response.ok) {
                                  
                                    fetch(`/Review/GetReviewsPartial?businessId=${businessId}`)
                                        .then(response => response.text())
                                        .then(html => {
                                            document.getElementById('reviewsContainer').innerHTML = html;
                                            setupReviewActions();
                                            modal.hide();
                                            showToast('success', 'Success', 'Review deleted successfully');
                                        });
                                } else {
                                    throw new Error('Failed to delete review');
                                }
                            })
                            .catch(error => {
                                console.error('Error deleting review:', error);
                                modal.hide();
                                showToast('error', 'Error', 'Failed to delete review');
                            });
                        };
                    });
                });
            }
            
           
            setupReviewActions();
            
          
            document.querySelector('.share-business').addEventListener('click', function() {
                const url = this.getAttribute('data-share-url');
                
                if (navigator.share) {
                    navigator.share({
                        title: '@Model.Name',
                        text: 'Check out @Model.Name on our business directory!',
                        url: url
                    })
                    .catch(error => console.error('Error sharing:', error));
                } else {
                  
                    const tempInput = document.createElement('input');
                    document.body.appendChild(tempInput);
                    tempInput.value = url;
                    tempInput.select();
                    document.execCommand('copy');
                    document.body.removeChild(tempInput);
                    
                    showToast('success', 'URL Copied', 'Link copied to clipboard');
                }
            });
            
            
            const favoriteButton = document.querySelector('.favorite-business');
            if (favoriteButton) {
                favoriteButton.addEventListener('click', function() {
                    const businessId = this.getAttribute('data-id');
                    const isFavorite = this.querySelector('i').classList.contains('fas');
                    
                    fetch('/Favorite/ToggleFavorite', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ businessId: businessId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const icon = this.querySelector('i');
                            
                            if (data.isFavorite) {
                                icon.classList.remove('far');
                                icon.classList.add('fas');
                                icon.style.color = '#e74c3c';
                                showToast('success', 'Success', 'Added to favorites');
                            } else {
                                icon.classList.remove('fas');
                                icon.classList.add('far');
                                icon.style.color = '';
                                showToast('success', 'Success', 'Removed from favorites');
                            }
                        } else {
                            showToast('error', 'Error', data.message || 'Failed to update favorites');
                        }
                    })
                    .catch(error => {
                        console.error('Error updating favorites:', error);
                        showToast('error', 'Error', 'An error occurred. Please try again.');
                    });
                });
                
               
                fetch(`/Favorite/IsFavorite?businessId=${favoriteButton.getAttribute('data-id')}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.isFavorite) {
                            const icon = favoriteButton.querySelector('i');
                            icon.classList.remove('far');
                            icon.classList.add('fas');
                            icon.style.color = '#e74c3c';
                        }
                    })
                    .catch(error => console.error('Error checking favorite status:', error));
            }
            
         
            function showToast(type, title, message) {
                const toastContainer = document.createElement('div');
                toastContainer.className = 'position-fixed top-0 end-0 p-3';
                toastContainer.style.zIndex = 1080;
                
                const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
                
                toastContainer.innerHTML = `
                    <div class="toast align-items-center text-white ${bgClass} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                <strong>${title}:</strong> ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(toastContainer);
                
                const toastElement = toastContainer.querySelector('.toast');
                const toast = new bootstrap.Toast(toastElement, { delay: 5000 });
                toast.show();
                
                toastElement.addEventListener('hidden.bs.toast', function() {
                    document.body.removeChild(toastContainer);
                });
            }
        });
    </script>
}