@model mvc.ViewModels.BusinessViewModel

@{
    ViewData["Title"] = "Add Your Business";
}

<style>
    /* Page layout styles */
    .add-business-container {
        padding: 3rem 0;
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    .form-container {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .page-title {
        color: var(--secondary-color);
        font-weight: 700;
        margin-bottom: 1.5rem;
        position: relative;
        padding-bottom: 1rem;
    }

    .page-title:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 80px;
        height: 3px;
        background-color: var(--primary-color);
    }

    .form-section {
        margin-bottom: 2.5rem;
        position: relative;
    }

    .section-title {
        font-size: 1.3rem;
        color: var(--secondary-color);
        margin-bottom: 1.2rem;
        font-weight: 600;
        display: flex;
        align-items: center;
    }

    .section-title i {
        margin-right: 0.5rem;
        color: var(--primary-color);
        font-size: 1.2rem;
    }

    .section-desc {
        color: #6c757d;
        margin-bottom: 1.2rem;
        font-size: 0.95rem;
    }

    /* Form control styles */
    .form-label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .form-control {
        border-radius: 8px;
        padding: 0.6rem 1rem;
        border: 1px solid #ced4da;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
    }

    .form-select {
        border-radius: 8px;
        padding: 0.6rem 1rem;
        border: 1px solid #ced4da;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .form-select:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
    }

    .form-text {
        font-size: 0.85rem;
        color: #6c757d;
    }

    /* Business Hours Section */
    .business-hours-container {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1.5rem;
        margin-top: 1rem;
        border: 1px solid rgba(0,0,0,0.05);
    }

    .day-row {
        display: flex;
        align-items: center;
        padding: 1rem 0;
        border-bottom: 1px solid rgba(0,0,0,0.05);
    }

    .day-row:last-child {
        border-bottom: none;
    }

    .day-name {
        font-weight: 600;
        color: #495057;
        width: 120px;
        flex-shrink: 0;
    }

    .hours-input-group {
        display: flex;
        align-items: center;
        flex-grow: 1;
        gap: 1rem;
    }

    .time-input {
        max-width: 130px;
        text-align: center;
    }

    .closed-checkbox {
        margin-left: 1.5rem;
        display: flex;
        align-items: center;
    }

    .closed-checkbox input {
        margin-right: 0.5rem;
    }

    .hours-separator {
        font-weight: 500;
        color: #6c757d;
    }

    /* Add Feature Section */
    .feature-item {
        position: relative;
        margin-bottom: 1rem;
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        border: 1px solid rgba(0,0,0,0.05);
    }

    .remove-feature {
        position: absolute;
        top: 0.75rem;
        right: 0.75rem;
        color: #e74c3c;
        background: none;
        border: none;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .remove-feature:hover {
        color: #c0392b;
        transform: scale(1.1);
    }

    .add-feature-btn {
        background-color: #ecf0f1;
        color: #2c3e50;
        border: 1px dashed #bdc3c7;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 1rem;
    }

    .add-feature-btn:hover {
        background-color: #e0e6e8;
        border-color: #95a5a6;
    }

    .add-feature-btn i {
        margin-right: 0.5rem;
    }

    /* Form Actions */
    .form-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #e9ecef;
    }

    .btn-cancel {
        background-color: #e9ecef;
        color: #495057;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-cancel:hover {
        background-color: #dee2e6;
        color: #212529;
    }

    .btn-submit {
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 2rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-submit:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    /* Map Section */
    .map-container {
        height: 300px;
        margin-top: 1rem;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        border: 1px solid #e9ecef;
    }

    #map {
        height: 100%;
        width: 100%;
    }

    /* Validation Styles */
    .field-validation-error {
        color: #e74c3c;
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: block;
    }

    .input-validation-error {
        border-color: #e74c3c;
    }

    .input-validation-error:focus {
        box-shadow: 0 0 0 0.2rem rgba(231, 76, 60, 0.25);
    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .hours-input-group {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
        
        .time-input {
            max-width: 100%;
            width: 100%;
        }
        
        .closed-checkbox {
            margin-left: 0;
            margin-top: 0.5rem;
        }
        
        .day-row {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .day-name {
            margin-bottom: 0.5rem;
            width: 100%;
        }
    }

    /* Image Preview Section */
    .image-preview-container {
        margin-top: 1rem;
        position: relative;
        border: 1px dashed #ced4da;
        border-radius: 8px;
        overflow: hidden;
        background-color: #f8f9fa;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .image-preview-container.has-image {
        border: none;
    }

    .image-preview {
        max-width: 100%;
        max-height: 200px;
        display: none;
    }

    .image-preview-placeholder {
        color: #6c757d;
        text-align: center;
        padding: 2rem;
    }

    .image-preview-placeholder i {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        display: block;
    }

    /* Category Features Section */
    .category-features-container {
        margin-top: 1.5rem;
        margin-bottom: 2rem;
    }

    .category-features-title {
        font-weight: 600;
        margin-bottom: 1rem;
        color: #495057;
    }

    .category-features-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .category-feature-item {
        background-color: #f1f8fe;
        border: 1px solid #d0e3f7;
        border-radius: 20px;
        padding: 0.4rem 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
    }

    .category-feature-item:hover {
        background-color: #e1f0fd;
    }

    .category-feature-item input {
        margin-right: 0.5rem;
    }

  
    .form-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.7);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        display: none;
    }

    .form-overlay.active {
        display: flex;
    }

    .form-loader {
        border: 5px solid #f3f3f3;
        border-top: 5px solid var(--primary-color);
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    .form-loader-text {
        color: var(--primary-color);
        font-weight: 600;
    }

    /* Toast Messages */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }

    .toast {
        min-width: 300px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        margin-bottom: 1rem;
        overflow: hidden;
        display: flex;
        animation: slideIn 0.3s ease forwards;
    }

    .toast.hide {
        animation: slideOut 0.3s ease forwards;
    }

    .toast-icon {
        width: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }

    .toast-success .toast-icon {
        background-color: #2ecc71;
    }

    .toast-error .toast-icon {
        background-color: #e74c3c;
    }

    .toast-content {
        padding: 1rem;
        flex-grow: 1;
    }

    .toast-title {
        font-weight: 600;
        margin-bottom: 0.3rem;
    }

    .toast-message {
        font-size: 0.9rem;
        color: #6c757d;
    }

    .toast-close {
        background: none;
        border: none;
        font-size: 1rem;
        color: #adb5bd;
        cursor: pointer;
        padding: 0.5rem;
        align-self: flex-start;
    }

    @@keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }

    @@keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
</style>


<div class="form-overlay" id="formOverlay">
    <div class="form-loader"></div>
    <div class="form-loader-text">Saving your business...</div>
</div>

<div class="toast-container" id="toastContainer"></div>

<div class="add-business-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10">
                <div class="form-container">
                    <h1 class="page-title">Add Your Business</h1>
                    
                    <form asp-action="Save" id="businessForm" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>
                        
                       
                        <div class="form-section">
                            <h2 class="section-title"><i class="fas fa-info-circle"></i> Basic Information</h2>
                            <p class="section-desc">Provide the essential details about your business.</p>
                            
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="Name" class="form-label">Business Name</label>
                                        <input asp-for="Name" class="form-control" placeholder="Enter business name" />
                                        <span asp-validation-for="Name" class="field-validation-error"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="CategoryId" class="form-label">Category</label>
                                        <select asp-for="CategoryId" class="form-select" id="categorySelect" onchange="loadCategoryFeatures(this.value)">
                                            <option value="">-- Select Category --</option>
                                            @if (Model.categories != null)
                                            {
                                                foreach (var category in Model.categories)
                                                {
                                                    <option value="@category.Id">@category.Name</option>
                                                }
                                            }
                                        </select>
                                        <span asp-validation-for="CategoryId" class="field-validation-error"></span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label asp-for="Description" class="form-label">Description</label>
                                <textarea asp-for="Description" class="form-control" rows="4" placeholder="Tell customers about your business..."></textarea>
                                <span asp-validation-for="Description" class="field-validation-error"></span>
                            </div>
                            
                            <div class="mb-3">
                                <label asp-for="MainImage" class="form-label">Main Image URL</label>
                                <input asp-for="MainImage" class="form-control" type="url" id="mainImageUrl" 
                                      placeholder="Enter image URL (https://example.com/image.jpg)" 
                                      onchange="previewImage(this.value)" 
                                      oninput="previewImage(this.value)" />
                                <span asp-validation-for="MainImage" class="field-validation-error"></span>
                                
                               
                                <div class="image-preview-container" id="imagePreviewContainer">
                                    <img src="" alt="Business Image Preview" class="image-preview" id="imagePreview">
                                    <div class="image-preview-placeholder" id="imagePreviewPlaceholder">
                                        <i class="far fa-image"></i>
                                        <p>Enter an image URL to see a preview</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                      
                        <div class="form-section">
                            <h2 class="section-title"><i class="fas fa-map-marker-alt"></i> Location</h2>
                            <p class="section-desc">Help customers find your business location.</p>
                            
                            <div class="mb-3">
                                <label asp-for="Address" class="form-label">Address</label>
                                <input asp-for="Address" class="form-control" placeholder="Enter full address" id="address-input" />
                                <span asp-validation-for="Address" class="field-validation-error"></span>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="Latitude" class="form-label">Latitude</label>
                                        <input asp-for="Latitude" class="form-control" id="latitude" readonly />
                                        <span asp-validation-for="Latitude" class="field-validation-error"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="Longitude" class="form-label">Longitude</label>
                                        <input asp-for="Longitude" class="form-control" id="longitude" readonly />
                                        <span asp-validation-for="Longitude" class="field-validation-error"></span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="map-container">
                                <div id="map"></div>
                            </div>
                        </div>
                        
                        
                        <div class="form-section">
                            <h2 class="section-title"><i class="far fa-clock"></i> Business Hours</h2>
                            <p class="section-desc">Let customers know when you're open for business.</p>
                            
                            <div class="business-hours-container">
                           
                                <div class="day-row">
                                    <div class="day-name">Sunday</div>
                                    <div class="hours-input-group">
                                        <input type="time" name="OpeningHours[0].OpenTime" class="form-control time-input" />
                                        <span class="hours-separator">to</span>
                                        <input type="time" name="OpeningHours[0].CloseTime" class="form-control time-input" />
                                        <div class="closed-checkbox">
                                            <input type="checkbox" class="form-check-input day-closed" id="sunday-closed" 
                                                   onchange="toggleDayClosed(this, 0)" />
                                            <label class="form-check-label" for="sunday-closed">Closed</label>
                                        </div>
                                    </div>
                                    <input type="hidden" name="OpeningHours[0].DayOfWeek" value="1" />
                                    <input type="hidden" name="OpeningHours[0].IsClosed" value="false" class="is-closed-input" />
                                </div>
                                
                            
                                <div class="day-row">
                                    <div class="day-name">Monday</div>
                                    <div class="hours-input-group">
                                        <input type="time" name="OpeningHours[1].OpenTime" class="form-control time-input" />
                                        <span class="hours-separator">to</span>
                                        <input type="time" name="OpeningHours[1].CloseTime" class="form-control time-input" />
                                        <div class="closed-checkbox">
                                            <input type="checkbox" class="form-check-input day-closed" id="monday-closed" 
                                                   onchange="toggleDayClosed(this, 1)" />
                                            <label class="form-check-label" for="monday-closed">Closed</label>
                                        </div>
                                    </div>
                                    <input type="hidden" name="OpeningHours[1].DayOfWeek" value="2" />
                                    <input type="hidden" name="OpeningHours[1].IsClosed" value="false" class="is-closed-input" />
                                </div>
                                
                               
                                <div class="day-row">
                                    <div class="day-name">Tuesday</div>
                                    <div class="hours-input-group">
                                        <input type="time" name="OpeningHours[2].OpenTime" class="form-control time-input" />
                                        <span class="hours-separator">to</span>
                                        <input type="time" name="OpeningHours[2].CloseTime" class="form-control time-input" />
                                        <div class="closed-checkbox">
                                            <input type="checkbox" class="form-check-input day-closed" id="tuesday-closed" 
                                                   onchange="toggleDayClosed(this, 2)" />
                                            <label class="form-check-label" for="tuesday-closed">Closed</label>
                                        </div>
                                    </div>
                                    <input type="hidden" name="OpeningHours[2].DayOfWeek" value="3" />
                                    <input type="hidden" name="OpeningHours[2].IsClosed" value="false" class="is-closed-input" />
                                </div>
                                
                               
                                <div class="day-row">
                                    <div class="day-name">Wednesday</div>
                                    <div class="hours-input-group">
                                        <input type="time" name="OpeningHours[3].OpenTime" class="form-control time-input" />
                                        <span class="hours-separator">to</span>
                                        <input type="time" name="OpeningHours[3].CloseTime" class="form-control time-input" />
                                        <div class="closed-checkbox">
                                            <input type="checkbox" class="form-check-input day-closed" id="wednesday-closed" 
                                                   onchange="toggleDayClosed(this, 3)" />
                                            <label class="form-check-label" for="wednesday-closed">Closed</label>
                                        </div>
                                    </div>
                                    <input type="hidden" name="OpeningHours[3].DayOfWeek" value="4" />
                                    <input type="hidden" name="OpeningHours[3].IsClosed" value="false" class="is-closed-input" />
                                </div>
                                
                               
                                <div class="day-row">
                                    <div class="day-name">Thursday</div>
                                    <div class="hours-input-group">
                                        <input type="time" name="OpeningHours[4].OpenTime" class="form-control time-input" />
                                        <span class="hours-separator">to</span>
                                        <input type="time" name="OpeningHours[4].CloseTime" class="form-control time-input" />
                                        <div class="closed-checkbox">
                                            <input type="checkbox" class="form-check-input day-closed" id="thursday-closed" 
                                                   onchange="toggleDayClosed(this, 4)" />
                                            <label class="form-check-label" for="thursday-closed">Closed</label>
                                        </div>
                                    </div>
                                    <input type="hidden" name="OpeningHours[4].DayOfWeek" value="5" />
                                    <input type="hidden" name="OpeningHours[4].IsClosed" value="false" class="is-closed-input" />
                                </div>
                                
                              
                                <div class="day-row">
                                    <div class="day-name">Friday</div>
                                    <div class="hours-input-group">
                                        <input type="time" name="OpeningHours[5].OpenTime" class="form-control time-input" />
                                        <span class="hours-separator">to</span>
                                        <input type="time" name="OpeningHours[5].CloseTime" class="form-control time-input" />
                                        <div class="closed-checkbox">
                                            <input type="checkbox" class="form-check-input day-closed" id="friday-closed" 
                                                   onchange="toggleDayClosed(this, 5)" />
                                            <label class="form-check-label" for="friday-closed">Closed</label>
                                        </div>
                                    </div>
                                    <input type="hidden" name="OpeningHours[5].DayOfWeek" value="6" />
                                    <input type="hidden" name="OpeningHours[5].IsClosed" value="false" class="is-closed-input" />
                                </div>
                                
                              
                                <div class="day-row">
                                    <div class="day-name">Saturday</div>
                                    <div class="hours-input-group">
                                        <input type="time" name="OpeningHours[6].OpenTime" class="form-control time-input" />
                                        <span class="hours-separator">to</span>
                                        <input type="time" name="OpeningHours[6].CloseTime" class="form-control time-input" />
                                        <div class="closed-checkbox">
                                            <input type="checkbox" class="form-check-input day-closed" id="saturday-closed" 
                                                   onchange="toggleDayClosed(this, 6)" />
                                            <label class="form-check-label" for="saturday-closed">Closed</label>
                                        </div>
                                    </div>
                                    <input type="hidden" name="OpeningHours[6].DayOfWeek" value="7" />
                                    <input type="hidden" name="OpeningHours[6].IsClosed" value="false" class="is-closed-input" />
                                </div>
                            </div>
                        </div>
                        
                       
                        <div class="form-section">
                            <h2 class="section-title"><i class="fas fa-star"></i> Business Features</h2>
                            <p class="section-desc">Highlight what makes your business special.</p>
                            
                           
                            <div class="category-features-container" id="categoryFeaturesContainer" style="display: none;">
                                <h4 class="category-features-title">
                                    <i class="fas fa-tags"></i> Available Category Features 
                                </h4>
                                <div class="category-features-list" id="categoryFeaturesList">
                                   
                                </div>
                            </div>
                            
                           
                            <h4 class="category-features-title">
                                <i class="fas fa-plus-circle"></i> Custom Features
                            </h4>
                            <div id="featuresContainer">
                               
                                <div class="feature-item">
                                   
                                    <input type="text"  class="form-control" placeholder="Enter a feature (e.g., Free WiFi, Parking Available)" />
                                    <button type="button" class="remove-feature" onclick="removeFeature(this)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <button type="button" class="add-feature-btn w-100" onclick="addFeature()">
                                <i class="fas fa-plus-circle"></i> Add Another Feature
                            </button>
                        </div>
                        
                       
                        <div class="form-actions">
                            <a href="/" class="btn btn-cancel">Cancel</a>
                            <button type="submit" class="btn btn-submit" id="submitButton">
                                <i class="fas fa-check me-2"></i> Save Business
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDw6thoxZITqFU-HsZMnUu6p5hy3xc-gv0&libraries=places"></script>
    <script>
        let map;
        let marker;
        let featureCount = 1;
        let categoryFeatureCount = 0;
        

        function initMap() {
            
            const initialLat = 31.9539;
            const initialLng = 35.9106;
            
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: initialLat, lng: initialLng },
                zoom: 12
            });
            
            marker = new google.maps.Marker({
                position: { lat: initialLat, lng: initialLng },
                map: map,
                draggable: true
            });
            
            
            google.maps.event.addListener(marker, 'dragend', function() {
                updateCoordinates(marker.getPosition());
            });
            
           
            const input = document.getElementById('address-input');
            const autocomplete = new google.maps.places.Autocomplete(input);
            
            autocomplete.addListener('place_changed', function() {
                const place = autocomplete.getPlace();
                
                if (!place.geometry) {
                    return;
                }
                
                
                map.setCenter(place.geometry.location);
                marker.setPosition(place.geometry.location);
                
                
                updateCoordinates(place.geometry.location);
            });
        }
        
       
        function updateCoordinates(position) {
            document.getElementById('latitude').value = position.lat().toFixed(6);
            document.getElementById('longitude').value = position.lng().toFixed(6);
        }
        
       
        function toggleDayClosed(checkbox, index) {
            const row = checkbox.closest('.day-row');
            const timeInputs = row.querySelectorAll('.time-input');
            const isClosedInput = row.querySelector('.is-closed-input');
            
            if (checkbox.checked) {
              
                timeInputs.forEach(input => {
                    input.disabled = true;
                    input.value = '';
                });
                isClosedInput.value = 'true';
            } else {
                
                timeInputs.forEach(input => {
                    input.disabled = false;
                });
                isClosedInput.value = 'false';
            }
        }
        
       
        function previewImage(url) {
            const preview = document.getElementById('imagePreview');
            const container = document.getElementById('imagePreviewContainer');
            const placeholder = document.getElementById('imagePreviewPlaceholder');
            
            if (url && isValidImageUrl(url)) {
                preview.src = url;
                preview.style.display = 'block';
                placeholder.style.display = 'none';
                container.classList.add('has-image');
            } else {
                preview.src = '';
                preview.style.display = 'none';
                placeholder.style.display = 'flex';
                container.classList.remove('has-image');
            }
        }
        
       
        function isValidImageUrl(url) {
            if (!url) return false;
            
            
            if (!url.match(/^https?:\/\/.+\..+/i)) return false;
            
           
            const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
            const lowercaseUrl = url.toLowerCase();
            return imageExtensions.some(ext => lowercaseUrl.endsWith(ext)) || 
                   lowercaseUrl.includes('image') || 
                   lowercaseUrl.includes('photo');
        }
        
       
        function loadCategoryFeatures(categoryId) {
            if (!categoryId) {
                document.getElementById('categoryFeaturesContainer').style.display = 'none';
                return;
            }
            
           
            const featuresContainer = document.getElementById('categoryFeaturesList');
            featuresContainer.innerHTML = '<div class="text-center w-100 py-3"><i class="fas fa-spinner fa-spin me-2"></i> Loading features...</div>';
            document.getElementById('categoryFeaturesContainer').style.display = 'block';
            
           
            fetch(`/Business/GetCategoryFeatures?categoryId=${categoryId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(features => {
                    if (features && features.length > 0) {
                        displayCategoryFeatures(features);
                    } else {
                        featuresContainer.innerHTML = '<div class="text-center w-100 py-2">No features available for this category</div>';
                    }
                })
                .catch(error => {
                    console.error('Error fetching category features:', error);
                    featuresContainer.innerHTML = '<div class="text-center text-danger w-100 py-2">Error loading features. Please try again.</div>';
                });
        }
        
       
        function displayCategoryFeatures(features) {
            const featuresContainer = document.getElementById('categoryFeaturesList');
            featuresContainer.innerHTML = '';
            
            features.forEach((feature, index) => {
                const featureItem = document.createElement('div');
                featureItem.className = 'category-feature-item';
                featureItem.innerHTML = `
                    <input type="checkbox" id="categoryFeature_${feature.id}" name="CategoryFeatureIds" value="${feature.id}" class="form-check-input" onchange="toggleCategoryFeature(this, '${feature.name}')">
                    <label for="categoryFeature_${feature.id}">${feature.name}</label>
                `;
                featuresContainer.appendChild(featureItem);
            });
        }
        
      
        function toggleCategoryFeature(checkbox, featureName) {
            if (checkbox.checked) {
                
                addFeatureWithName(featureName);
            } else {
               
                removeFeatureByName(featureName);
            }
        }
        
        
        function addFeatureWithName(name) {
          
            const existingInputs = document.querySelectorAll('#featuresContainer input[type="text"]');
            for (let input of existingInputs) {
                if (input.value.toLowerCase() === name.toLowerCase()) {
                    return; 
                }
            }
            
            addFeature(name);
        }
        
       
        function removeFeatureByName(name) {
            const featuresContainer = document.getElementById('featuresContainer');
            const featureInputs = featuresContainer.querySelectorAll('input[type="text"]');
            
            featureInputs.forEach(input => {
                if (input.value.toLowerCase() === name.toLowerCase()) {
                    const featureItem = input.closest('.feature-item');
                    featureItem.remove();
                    reindexFeatures();
                }
            });
        }
        
       
        function addFeature(value = '') {
            const container = document.getElementById('featuresContainer');
            const featureItem = document.createElement('div');
            featureItem.className = 'feature-item';
            featureItem.innerHTML = `
                <input type="text" name="BusinessFeatures[${featureCount}].Name" class="form-control" 
                      value="${value}" 
                      placeholder="Enter a feature (e.g., Free WiFi, Parking Available)" />
                <button type="button" class="remove-feature" onclick="removeFeature(this)">
                    <i class="fas fa-times"></i>
                </button>
            `;
            container.appendChild(featureItem);
            featureCount++;
        }
        
        
        function removeFeature(button) {
            const featureItem = button.closest('.feature-item');
           
            const featureName = featureItem.querySelector('input[type="text"]').value;
            
           
            document.querySelectorAll('#categoryFeaturesList input[type="checkbox"]').forEach(checkbox => {
                const label = checkbox.nextElementSibling;
                if (label && label.textContent.toLowerCase() === featureName.toLowerCase()) {
                    checkbox.checked = false;
                }
            });
            
            featureItem.remove();
            reindexFeatures();
        }
        

        function reindexFeatures() {
            const featureInputs = document.querySelectorAll('#featuresContainer input[type="text"]');
            featureInputs.forEach((input, index) => {
                input.name = `BusinessFeatures[${index}].Name`;
            });
            featureCount = featureInputs.length;
        }
        
   
        function showToast(type, title, message, duration = 5000) {
            const toastContainer = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.innerHTML = `
                <div class="toast-icon">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                </div>
                <div class="toast-content">
                    <div class="toast-title">${title}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close" onclick="closeToast(this)">
                    <i class="fas fa-times"></i>
                </button>
            `;
            toastContainer.appendChild(toast);
            
        
            setTimeout(() => {
                closeToast(toast.querySelector('.toast-close'));
            }, duration);
        }
        
      
        function closeToast(button) {
            const toast = button.closest('.toast');
            toast.classList.add('hide');
            setTimeout(() => {
                toast.remove();
            }, 300);
        }
        
       
        document.getElementById('businessForm').addEventListener('submit', function(e) {
          
            document.getElementById('formOverlay').classList.add('active');
            document.getElementById('submitButton').disabled = true;
            
          
            if (!this.checkValidity()) {
                e.preventDefault();
                document.getElementById('formOverlay').classList.remove('active');
                document.getElementById('submitButton').disabled = false;
                showToast('error', 'Validation Error', 'Please check the form for errors and try again.');
            } 
            else {
                showToast('success', 'Success', 'Your business has been added successfully!');
            }
        });
        
       
        window.onload = function() {
            initMap();
            
          
            @if (TempData["Success"] != null)
            {
                <text>
                showToast('success', 'Success', '@TempData["Success"]');
                </text>
            }
            
            @if (TempData["Error"] != null)
            {
                <text>
                showToast('error', 'Error', '@TempData["Error"]');
                </text>
            }
        };
    </script>
}
