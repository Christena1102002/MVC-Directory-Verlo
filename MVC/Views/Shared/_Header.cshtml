@using System.Security.Claims
@{
    ViewData["ShowSidebar"] = false;  // أو false
    ViewData["ShowHeader"] = true;  // أو true
}

<head>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet" />

    <style>
        .vr-header__welcome {
            color: #28a745;
            font-weight: 600;
            font-size: 1rem;
            font-family: 'Poppins', sans-serif;
            margin-left: 1rem;
        }

        /* Enhanced Category slider styles with better nav integration */
        .vr-category-slider {
            width: 100%;
            overflow-x: auto;
            white-space: nowrap;
            scrollbar-width: thin;
            padding: 15px 0;
            background: linear-gradient(to bottom, #f1f1f1, #ffffff);
            border-bottom: 1px solid #e9ecef;
            position: relative;
            margin-top: 0;
        }

        .vr-header + .vr-category-slider {
            margin-top: -1px; /* Remove gap between header and slider */
        }

        .vr-category-slider::-webkit-scrollbar {
            height: 3px;
        }

        .vr-category-slider::-webkit-scrollbar-thumb {
            background-color: rgba(40, 167, 69, 0.4);
            border-radius: 10px;
        }

        .vr-category-slider::-webkit-scrollbar-track {
            background-color: rgba(0, 0, 0, 0.05);
            border-radius: 10px;
        }

        .vr-category-slider__container {
            display: inline-flex;
            padding: 0 20px;
            align-items: center;
            min-width: 100%;
            justify-content: center; /* Center categories if they don't fill the width */
        }

        .vr-category-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0 10px;
            text-decoration: none;
            color: #333;
            transition: all 0.3s ease;
            min-width: 65px;
            position: relative;
            padding: 5px;
        }

        .vr-category-item:hover {
            transform: translateY(-3px);
        }

        .vr-category-item:hover .vr-category-item__icon {
            box-shadow: 0 8px 15px rgba(40, 167, 69, 0.2);
            transform: scale(1.05);
        }

        .vr-category-item:hover .vr-category-item__icon i {
            color: #fff;
        }

        .vr-category-item:hover .vr-category-item__name {
            color: #28a745;
            font-weight: 600;
        }

        /* Updated Category item icon for images */
        .vr-category-item__icon {
            width: 55px;
            height: 55px;
            background: linear-gradient(135deg, #f5f7fa 0%, #ffffff 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 8px;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            position: relative;
            z-index: 1;
            border: 1px solid rgba(0, 0, 0, 0.05);
            overflow: hidden; /* Ensure images don't overflow the circle */
        }

        .vr-category-item__image {
            width: 32px;
            height: 32px;
            object-fit: contain; /* Maintain aspect ratio */
            transition: all 0.3s ease;
        }

        .vr-category-item:hover .vr-category-item__image {
            transform: scale(1.1);
        }

        .vr-category-item__icon img.fallback-icon {
            width: 24px;
            height: 24px;
            opacity: 0.7;
        }

        /* Keep icon styling for Font Awesome fallbacks */
        .vr-category-item__icon i {
            font-size: 22px;
            color: #28a745;
            transition: all 0.3s ease;
        }

        .vr-category-item:hover .vr-category-item__icon {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .vr-category-item:hover .vr-category-item__icon i {
            color: #fff;
        }

        /* Active state image adjustments */
        .vr-category-item.active .vr-category-item__image {
            filter: brightness(0) invert(1); /* Make the image white when active */
        }

        /* For when images take up more space */
        .vr-category-item__icon img.large-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        /* Mobile adjustments for images */
        @@media (max-width: 768px) {
            .vr-category-item__image {
                width: 28px;
                height: 28px;
            }
        }

        .vr-category-item__name {
            font-size: 12px;
            font-weight: 500;
            text-align: center;
            margin-top: 5px;
            white-space: normal;
            width: 100%;
            max-width: 75px;
            transition: all 0.3s ease;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            height: 32px;
        }

        .vr-category-slider__nav {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: white;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 10;
            transition: all 0.2s ease;
            border: none;
            opacity: 0.8;
        }

        .vr-category-slider__nav:hover {
            background-color: #28a745;
            color: white;
            opacity: 1;
        }

        .vr-category-slider__nav--prev {
            left: 5px;
        }

        .vr-category-slider__nav--next {
            right: 5px;
        }

        .vr-category-slider__nav i {
            font-size: 12px;
        }

        /* Add shadow to header to make it appear above the slider */
        .vr-header {
            position: relative;
            z-index: 100;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        /* Active category */
        .vr-category-item.active .vr-category-item__icon {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

        .vr-category-item.active .vr-category-item__icon i {
            color: white;
        }

        .vr-category-item.active .vr-category-item__name {
            color: #28a745;
            font-weight: 600;
        }

        /* Mobile adaptations */
        @@media (max-width: 768px) {
            .vr-category-slider__container {
                justify-content: flex-start; /* Left align on mobile */
                padding: 0 12px;
            }

            .vr-category-item {
                margin: 0 8px;
                min-width: 60px;
            }

            .vr-category-item__icon {
                width: 48px;
                height: 48px;
            }

            .vr-category-item__icon i {
                font-size: 18px;
            }

            .vr-category-item__name {
                font-size: 11px;
                max-width: 60px;
                height: 28px;
            }

            .vr-category-slider__nav {
                width: 28px;
                height: 28px;
            }
        }

        /* Notification styles */
        .vr-header__notification {
            position: relative;
            margin-right: 15px;
            cursor: pointer;
        }

        .vr-header__notification-icon {
            color: #555;
            font-size: 1.2rem;
            transition: color 0.2s;
        }

        .vr-header__notification:hover .vr-header__notification-icon {
            color: #28a745;
        }

        .vr-header__notification-counter {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
        }

        .vr-notification-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            width: 320px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            display: none;
            margin-top: 10px;
            overflow: hidden;
            max-height: 400px;
        }

        .vr-notification-dropdown.active {
            display: block;
        }

        .vr-notification-header {
            padding: 12px 15px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .vr-notification-header h4 {
            margin: 0;
            font-size: 16px;
            color: #333;
        }

        .vr-notification-header a {
            color: #28a745;
            font-size: 12px;
            text-decoration: none;
        }

        .vr-notification-list {
            overflow-y: auto;
            max-height: 320px;
        }

        .vr-notification-item {
            padding: 12px 15px;
            border-bottom: 1px solid #f1f1f1;
            display: flex;
            align-items: flex-start;
            transition: background-color 0.2s;
        }

        .vr-notification-item:hover {
            background-color: #f8f9fa;
        }

        .vr-notification-item--unread {
            background-color: #edf7ee;
        }

        .vr-notification-item--unread:hover {
            background-color: #e2f2e4;
        }

        .vr-notification-icon {
            width: 36px;
            height: 36px;
            background-color: #e9f5ea;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
            flex-shrink: 0;
        }

        .vr-notification-icon i {
            color: #28a745;
            font-size: 16px;
        }

        .vr-notification-content {
            flex-grow: 1;
        }

        .vr-notification-title {
            font-size: 14px;
            margin: 0 0 5px;
            color: #333;
            font-weight: 500;
        }

        .vr-notification-message {
            font-size: 12px;
            color: #666;
            margin: 0;
        }

        .vr-notification-time {
            font-size: 11px;
            color: #999;
            margin-top: 5px;
        }
    </style>
</head>

<header class="vr-header">
    <div class="vr-header__container">
        <!-- Logo Section -->
        <a href="/" class="vr-header__logo-link">
            <img src="/images/logo/logo.png" alt="Vyrlo" class="vr-header__logo">
        </a>

        <!-- Mobile Menu Trigger -->
        <button class="vr-header__menu-trigger" id="menuTrigger" aria-label="Toggle menu">
            <span class="vr-header__menu-icon"></span>
        </button>

        <!-- Main Navigation -->
        <nav class="vr-header__nav" id="mainNav">
           
            @if (User.IsInRole("User"))
            {
                <a href="/HomePage/Index" class="vr-header__link" data-page="home">Home</a>
                <a href="/Business/Getall" class="vr-header__link" data-page="Business">Business</a>
                <a href="/Package/GetAll" class="vr-header__link" data-page="Packages">Packages</a>
                <a href="/Category/Index" class="vr-header__link" data-page="Categories">Categories</a>

                <a href="/Payment/GetAllChecouts" class="vr-header__link" data-page="Payments">Payments</a>
            }
        </nav>

        @if (User.Identity.IsAuthenticated)
        {
            <div class="vr-header__user" id="userView">
                <!-- User Menu -->
                <div class="vr-header__user-menu">
                    <button class="vr-header__user-trigger" id="profileTrigger" aria-expanded="false">
                        @if(User.IsInRole("User"))
                        {
                        <!-- Notification Icon -->
                        <div class="vr-header__notification" id="notificationTrigger">
                            <i class="fas fa-bell vr-header__notification-icon"></i>
                            <span class="vr-header__notification-counter" id="notificationCounter">0</span>

                            <!-- Notification Dropdown -->
                            <div class="vr-notification-dropdown" id="notificationDropdown">
                                <div class="vr-notification-header">
                                    <h4>Review Notifications</h4>
                                    <a href="#" id="markAllRead">Mark all as read</a>
                                </div>
                                <div class="vr-notification-list" id="notificationList">
                                    <div class="text-center p-3" id="emptyNotifications" style="display: none;">
                                        <p>No new reviews</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        }
                       
                        <div class="vr-avatar vr-avatar--md">
                            <img src="/images/defaults/default-avatar.png"
                                 alt="Profile"
                                 class="vr-avatar__image"
                                 id="headerAvatar"
                                 onerror="this.src='/images/defaults/default-avatar.png'">
                        </div>
                        <span class="vr-header__user-name" id="profileName">Hello, @User.Identity.Name</span>
                        <i class="fas fa-chevron-down vr-header__profile-arrow"></i>
                        
                    
                    </button>

                    <div class="vr-header__dropdown" id="profileDropdown">
                        <div class="vr-dropdown__content">
                            <div class="vr-dropdown__user-info">
                                <div class="vr-avatar vr-avatar--lg">
                                    <img src="/images/defaults/default-avatar.png"
                                         alt="Profile"
                                         id="dropdownAvatar"
                                         onerror="this.src='/images/defaults/default-avatar.png'">
                                </div>
                                <div class="vr-dropdown__user-details">
                                    <h4 id="dropdownName">@User.Identity.Name</h4>
                                    <p id="dropdownEmail">@User.FindFirstValue(ClaimTypes.Email) ?? "user@example.com"</p>
                                </div>
                            </div>
                            <hr class="vr-dropdown__divider">

                            @if (User.IsInRole("Admin"))
                            {
                                <!-- Admin Menu Items -->
                                <a href="/AdminChat/Index" class="vr-dropdown__item">
                                    <i class="fas fa-headset"></i>
                                    <span>Admin Chat</span>
                                </a>
                                <a href="/Payment/GetAllChecouts" class="vr-dropdown__item">
                                    <i class="fas fa-money-bill"></i>
                                    <span>Payment History</span>
                                </a>
                            }
                            else
                            {
                                <!-- Regular User Menu Items -->
                              
                            }

                            <hr class="vr-dropdown__divider">
                            <a href="/Account/Logout" class="vr-dropdown__item vr-dropdown__item--danger" id="logoutBtn">
                                <i class="fas fa-sign-out-alt"></i>
                                <span>Logout</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="vr-header__guest" id="guestView">
                <a href="/Account/Login" class="vr-btn vr-btn--outline">
                    <i class="fas fa-sign-in-alt"></i>
                    <span>Login</span>
                </a>
                <a href="/Account/Register" class="vr-btn vr-btn--primary">
                    <i class="fas fa-user-plus"></i>
                    <span>Register</span>
                </a>
            </div>
        }
    </div>
</header>

<!-- Enhanced Category Slider -->
<div class="vr-category-slider" id="categorySlider">
    <button class="vr-category-slider__nav vr-category-slider__nav--prev" id="sliderPrev">
        <i class="fas fa-chevron-left"></i>
    </button>
    <div class="vr-category-slider__container" id="categorySliderContainer">
        @await Component.InvokeAsync("CategorySlider")
    </div>
    <button class="vr-category-slider__nav vr-category-slider__nav--next" id="sliderNext">
        <i class="fas fa-chevron-right"></i>
    </button>
</div>

<!-- Toast Container -->
<div class="vr-toast-container" id="toastContainer"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    // Profile dropdown toggle functionality
    document.addEventListener('DOMContentLoaded', function() {
        const profileTrigger = document.getElementById('profileTrigger');
        const profileDropdown = document.getElementById('profileDropdown');
        const notificationTrigger = document.getElementById('notificationTrigger');
        const notificationDropdown = document.getElementById('notificationDropdown');
        const notificationList = document.getElementById('notificationList');
        const emptyNotifications = document.getElementById('emptyNotifications');
        
        // Connect to SignalR
        var hub = new signalR.HubConnectionBuilder().withUrl("/reviewhub").build();
        
        // Start the connection
        hub.start().then(function() {
            console.log("Review hub connected successfully");
        }).catch(function(err) {
            console.error("Error connecting to ReviewHub: " + err);
        });
        
        // Listen for new review notifications
        hub.on("NewReviewArrived", function(notification) {
            console.log("New review notification received:", notification);
            
            // Only process the notification if it's for one of this user's businesses
            fetchUserBusinessIds().then(userBusinessIds => {
                if (userBusinessIds.includes(notification.BusinessId)) {
                    // Increment notification counter
                    const counter = document.getElementById('notificationCounter');
                    const currentCount = parseInt(counter.textContent || '0');
                    updateNotificationCounter(currentCount + 1);
                    
                    // If notification dropdown is open, add the new notification to the top
                    if (notificationDropdown.classList.contains('active')) {
                        addNotificationToList(notification, true);
                    }
                }
            });
        });
        
        // Profile dropdown functionality 
        if (profileTrigger) {
            profileTrigger.addEventListener('click', function(e) {
                // Don't trigger if notification area was clicked
                if (e.target.closest('.vr-header__notification')) {
                    return;
                }
                
                const expanded = this.getAttribute('aria-expanded') === 'true';
                this.setAttribute('aria-expanded', !expanded);
                profileDropdown.classList.toggle('active');
                
                // Close dropdown when clicking outside
                if (!expanded) {
                    document.addEventListener('click', closeProfileDropdown);
                } else {
                    document.removeEventListener('click', closeProfileDropdown);
                }
            });
            
            // Prevent dropdown from closing when clicking inside it
            profileDropdown.addEventListener('click', function(e) {
                e.stopPropagation();
            });
        }
        
        function closeProfileDropdown(e) {
            if (profileTrigger && !profileTrigger.contains(e.target)) {
                profileTrigger.setAttribute('aria-expanded', 'false');
                profileDropdown.classList.remove('active');
                document.removeEventListener('click', closeProfileDropdown);
            }
        }
        
        // Notification functionality
        if (notificationTrigger) {
            notificationTrigger.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent triggering the profile dropdown
                notificationDropdown.classList.toggle('active');
                
                // Close dropdown when clicking outside
                if (notificationDropdown.classList.contains('active')) {
                    document.addEventListener('click', closeNotificationDropdown);
                    
                    // Load notifications when opening dropdown
                    loadReviewNotifications();
                } else {
                    document.removeEventListener('click', closeNotificationDropdown);
                }
            });
            
            // Prevent dropdown from closing when clicking inside it
            notificationDropdown.addEventListener('click', function(e) {
                e.stopPropagation();
            });
            
            // Mark all as read functionality
            document.getElementById('markAllRead').addEventListener('click', function(e) {
                e.preventDefault();
                markAllReviewsAsRead();
            });
        }
        
        function closeNotificationDropdown(e) {
            if (notificationTrigger && !notificationTrigger.contains(e.target)) {
                notificationDropdown.classList.remove('active');
                document.removeEventListener('click', closeNotificationDropdown);
            }
        }
        
        // Get list of business IDs owned by current user
        async function fetchUserBusinessIds() {
            try {
                const response = await fetch('/Business/GetUserBusinessIds');
                const businessIds = await response.json();
                return businessIds;
            } catch (error) {
                console.error('Error fetching user business IDs:', error);
                return [];
            }
        }
        
        // Load notifications from server
        async function loadReviewNotifications() {
            try {
                const response = await fetch('/Review/GetUserBusinessReviewNotifications');
                if (!response.ok) {
                    throw new Error('Failed to fetch notifications');
                }
                
                const notifications = await response.json();
                
                // Clear existing notifications
                notificationList.innerHTML = '';
                
                if (notifications && notifications.length > 0) {
                    // Add notifications to the list
                    notifications.forEach(notification => {
                        addNotificationToList(notification);
                    });
                    
                    // Update counter with unread count
                    const unreadCount = notifications.filter(n => !n.isRead).length;
                    updateNotificationCounter(unreadCount);
                    
                    // Hide empty message
                    emptyNotifications.style.display = 'none';
                } else {
                    // Show empty message
                    emptyNotifications.style.display = 'block';
                    updateNotificationCounter(0);
                }
            } catch (error) {
                console.error('Error loading notifications:', error);
                notificationList.innerHTML = '<div class="p-3 text-center">Failed to load notifications</div>';
                emptyNotifications.style.display = 'none';
            }
        }
        
        function addNotificationToList(notification, prepend = false) {
            const notificationItem = document.createElement('div');
            notificationItem.className = `vr-notification-item ${!notification.isRead ? 'vr-notification-item--unread' : ''}`;
            notificationItem.dataset.id = notification.id;
            
            // Format the notification data
            const businessName = notification.businessName || 'Your business';
            const rating = notification.rating || 0;
            const stars = '⭐'.repeat(rating);
            const timeAgo = notification.timeAgo || 'recently';
            
            notificationItem.innerHTML = `
                <div class="vr-notification-icon">
                    <i class="fas fa-star"></i>
                </div>
                <div class="vr-notification-content">
                    <h5 class="vr-notification-title">New Review for ${businessName}</h5>
                    <p class="vr-notification-message">
                        ${notification.email || 'Someone'} rated ${stars} (${rating}/5)<br>
                        Comment: ${notification.comment || 'No comment'}
                    </p>
                    <div class="vr-notification-time">${timeAgo}</div>
                </div>
            `;
            
            notificationItem.addEventListener('click', function() {
                markReviewAsRead(notification.id);
                window.location.href = `/Review/GetAllByBussniss?bussnissId=${notification.businessId}`;
            });
            
            if (prepend && notificationList.firstChild) {
                notificationList.insertBefore(notificationItem, notificationList.firstChild);
            } else {
                notificationList.appendChild(notificationItem);
            }
            
            // If this was the first notification, hide the empty message
            if (notificationList.children.length > 0) {
                emptyNotifications.style.display = 'none';
            }
        }
        
        async function markReviewAsRead(id) {
            try {
                await fetch(`/Review/MarkAsRead/${id}`, { method: 'POST' });
                
                // Update visual state
                const notificationItem = document.querySelector(`.vr-notification-item[data-id="${id}"]`);
                if (notificationItem) {
                    notificationItem.classList.remove('vr-notification-item--unread');
                }
                
                // Update counter
                const counter = document.getElementById('notificationCounter');
                const currentCount = parseInt(counter.textContent || '0');
                if (currentCount > 0) {
                    updateNotificationCounter(currentCount - 1);
                }
            } catch (error) {
                console.error('Error marking review as read:', error);
            }
        }
        
        async function markAllReviewsAsRead() {
            try {
                await fetch('/Review/MarkAllAsRead', { method: 'POST' });
                
                // Update all items to read state
                const unreadItems = document.querySelectorAll('.vr-notification-item--unread');
                unreadItems.forEach(item => {
                    item.classList.remove('vr-notification-item--unread');
                });
                
                // Update counter to zero
                updateNotificationCounter(0);
            } catch (error) {
                console.error('Error marking all reviews as read:', error);
            }
        }
        
        function updateNotificationCounter(count) {
            const counter = document.getElementById('notificationCounter');
            counter.textContent = count;
            
            // Hide counter if there are no notifications
            counter.style.display = count > 0 ? 'flex' : 'none';
        }
        
        // Mobile menu toggle
        const menuTrigger = document.getElementById('menuTrigger');
        const mainNav = document.getElementById('mainNav');
        
        if (menuTrigger && mainNav) {
            menuTrigger.addEventListener('click', function() {
                menuTrigger.classList.toggle('active');
                mainNav.classList.toggle('active');
            });
        }
        
        // Initial load of notification count
        fetch('/Review/GetUnreadReviewsCountForUserBusinesses')
            .then(response => response.json())
            .then(count => {
                updateNotificationCounter(count);
            })
            .catch(error => {
                console.error('Error fetching notification count:', error);
            });

        // Category slider navigation
        const sliderContainer = document.getElementById('categorySliderContainer');
        const prevBtn = document.getElementById('sliderPrev');
        const nextBtn = document.getElementById('sliderNext');
        const categorySlider = document.getElementById('categorySlider');
        
        if (sliderContainer && prevBtn && nextBtn) {
            // Navigation buttons
            prevBtn.addEventListener('click', function() {
                categorySlider.scrollBy({ left: -250, behavior: 'smooth' });
            });
            
            nextBtn.addEventListener('click', function() {
                categorySlider.scrollBy({ left: 250, behavior: 'smooth' });
            });
            
            // Check if scrolling is needed
            function checkScrollable() {
                const isScrollable = sliderContainer.scrollWidth > categorySlider.clientWidth;
                prevBtn.style.display = isScrollable ? 'flex' : 'none';
                nextBtn.style.display = isScrollable ? 'flex' : 'none';
                
                // Center individual items if there's extra space
                if (!isScrollable && sliderContainer.childElementCount > 0) {
                    const totalWidth = Array.from(sliderContainer.children).reduce((total, item) => {
                        return total + item.offsetWidth + parseInt(getComputedStyle(item).marginLeft) + parseInt(getComputedStyle(item).marginRight);
                    }, 0);
                    
                    if (totalWidth < categorySlider.clientWidth) {
                        sliderContainer.style.justifyContent = 'center';
                    } else {
                        sliderContainer.style.justifyContent = 'flex-start';
                    }
                }
            }
            
            // Set active category based on URL
            function setActiveCategory() {
                const urlParams = new URLSearchParams(window.location.search);
                const categoryId = urlParams.get('categoryId');
                
                if (categoryId) {
                    const categoryItems = sliderContainer.querySelectorAll('.vr-category-item');
                    categoryItems.forEach(item => {
                        item.classList.remove('active');
                        
                        const itemHref = new URL(item.href);
                        const itemCategoryId = new URLSearchParams(itemHref.search).get('categoryId');
                        
                        if (itemCategoryId === categoryId) {
                            item.classList.add('active');
                            
                            // Scroll to active item (after a small delay to ensure layout is complete)
                            setTimeout(() => {
                                const containerRect = categorySlider.getBoundingClientRect();
                                const itemRect = item.getBoundingClientRect();
                                const scrollPosition = itemRect.left - containerRect.left - (containerRect.width / 2) + (itemRect.width / 2);
                                categorySlider.scrollBy({ left: scrollPosition, behavior: 'smooth' });
                            }, 300);
                        }
                    });
                }
            }
            
            // Initial check and updates
            checkScrollable();
            setActiveCategory();
            
            // Listen for window resize
            window.addEventListener('resize', checkScrollable);
            
            // Add smooth horizontal scrolling with mouse wheel
            categorySlider.addEventListener('wheel', function(e) {
                if (e.deltaY !== 0) {
                    e.preventDefault();
                    categorySlider.scrollBy({ left: e.deltaY * 2, behavior: 'smooth' });
                }
            }, { passive: false });
        }
    });
</script>
