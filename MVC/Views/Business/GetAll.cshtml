@model List<mvc.Models.Business>
@{
    ViewData["Title"] = "Vyrlo";
    
    var categories = ViewBag.Categories ?? new List<mvc.Models.Category>();
    var currentPage = ViewBag.CurrentPage ?? 1;
    var totalPages = ViewBag.TotalPages ?? 1;
    var itemsPerPage = ViewBag.ItemsPerPage ?? 12;
    var totalItems = ViewBag.TotalItems ?? 0;
}

<!-- Page styles -->
<style>
    :root {
        --primary-light: #e3f2fd;
        --card-shadow: 0 4px 15px rgba(52, 152, 219, 0.1);
        --transition-normal: all 0.3s ease;
    }

    /* Hero section */
    .business-hero {
        background: linear-gradient(135deg, var(--primary-color) 0%, #2c3e50 100%);
        color: white;
        padding: 4rem 0 5rem;
        margin-bottom: -3rem;
        position: relative;
    }

    .business-hero::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 5rem;
        background: linear-gradient(to bottom, transparent, rgba(0,0,0,0.2));
    }

    .hero-content {
        max-width: 800px;
        margin: 0 auto;
        text-align: center;
    }

    .hero-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        text-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .hero-subtitle {
        font-size: 1.2rem;
        margin-bottom: 2rem;
        opacity: 0.9;
    }

    /* Search control */
    .hero-search {
        position: relative;
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
    }

    .hero-search input {
        width: 100%;
        padding: 1.2rem 1.5rem 1.2rem 3rem;
        border-radius: 50px;
        border: none;
        font-size: 1.1rem;
        box-shadow: 0 5px 20px rgba(0,0,0,0.15);
        transition: var(--transition-normal);
    }

    .hero-search input:focus {
        box-shadow: 0 5px 25px rgba(0,0,0,0.25);
    }

    .hero-search i {
        position: absolute;
        left: 1.2rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--primary-color);
        font-size: 1.2rem;
    }

    /* Main content area */
    .business-content {
        padding: 4rem 0;
        background-color: #f8f9fa;
        min-height: 70vh;
    }

    .filter-panel {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: var(--card-shadow);
        position: relative;
    }

    .filter-title {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: var(--secondary-color);
        display: flex;
        align-items: center;
    }

    .filter-title i {
        margin-right: 0.5rem;
        color: var(--primary-color);
    }

    .filter-row {
        display: flex;
        flex-wrap: wrap;
        gap: 0.8rem;
        margin-bottom: 1rem;
    }

    .filter-dropdown {
        flex: 1 1 200px;
        position: relative;
    }

    .filter-dropdown select {
        width: 100%;
        padding: 0.7rem 1rem;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        background-color: #fff;
        font-size: 0.95rem;
        color: #495057;
        appearance: none;
        cursor: pointer;
        transition: var(--transition-normal);
    }

    .filter-dropdown::after {
        content: '\f107';
        font-family: 'Font Awesome 5 Free';
        font-weight: 900;
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        pointer-events: none;
    }

    .filter-dropdown select:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
        outline: none;
    }

    .filter-chip-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .filter-chip {
        display: inline-flex;
        align-items: center;
        padding: 0.4rem 1rem;
        background-color: var(--primary-light);
        border-radius: 30px;
        font-size: 0.9rem;
        color: var(--primary-color);
        cursor: pointer;
        transition: var(--transition-normal);
    }

    .filter-chip:hover {
        background-color: #d1e7fc;
    }

    .filter-chip i {
        margin-left: 0.5rem;
        font-size: 0.8rem;
    }

    .filter-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 1.5rem;
        padding-top: 1rem;
        border-top: 1px solid #f0f0f0;
    }

    .clear-filters {
        color: #6c757d;
        background: none;
        border: none;
        font-size: 0.9rem;
        cursor: pointer;
        transition: var(--transition-normal);
        display: flex;
        align-items: center;
    }

    .clear-filters i {
        margin-right: 0.4rem;
    }

    .clear-filters:hover {
        color: #e74c3c;
    }

    .apply-filters {
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition-normal);
    }

    .apply-filters:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
    }

    /* Results section */
    .business-count {
        margin-bottom: 1.5rem;
        color: #6c757d;
        font-size: 0.95rem;
    }

    .business-count strong {
        color: var(--secondary-color);
        font-weight: 600;
    }

    .sort-options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .sort-by {
        display: flex;
        align-items: center;
    }

    .sort-by span {
        margin-right: 0.5rem;
        color: #6c757d;
        font-size: 0.95rem;
    }

    .sort-by select {
        padding: 0.4rem 2rem 0.4rem 0.8rem;
        border-radius: 6px;
        border: 1px solid #e0e0e0;
        font-size: 0.9rem;
        color: #495057;
        appearance: none;
        cursor: pointer;
        background-color: white;
        position: relative;
    }

    .sort-by-container {
        position: relative;
    }

    .sort-by-container::after {
        content: '\f107';
        font-family: 'Font Awesome 5 Free';
        font-weight: 900;
        position: absolute;
        right: 0.8rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        pointer-events: none;
    }

    .view-options button {
        background: none;
        border: none;
        font-size: 1.1rem;
        color: #adb5bd;
        cursor: pointer;
        margin-left: 0.5rem;
        transition: var(--transition-normal);
    }

    .view-options button:hover,
    .view-options button.active {
        color: var(--primary-color);
    }

    /* Business grid */
    .business-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .business-card {
        background-color: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: var(--card-shadow);
        transition: var(--transition-normal);
        position: relative;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .business-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(52, 152, 219, 0.15);
    }

    .card-image {
        height: 180px;
        background-size: cover;
        background-position: center;
        position: relative;
    }

    .card-category {
        position: absolute;
        top: 15px;
        left: 15px;
        background-color: rgba(255, 255, 255, 0.9);
        color: var(--primary-color);
        font-size: 0.8rem;
        padding: 0.3rem 0.8rem;
        border-radius: 30px;
        font-weight: 600;
    }

    .card-status {
        position: absolute;
        top: 15px;
        right: 15px;
        color: white;
        font-size: 0.8rem;
        padding: 0.3rem 0.8rem;
        border-radius: 30px;
        font-weight: 600;
    }

    .status-active {
        background-color: rgba(46, 204, 113, 0.9);
    }

    .status-inactive {
        background-color: rgba(231, 76, 60, 0.9);
    }

    .package-badge {
        position: absolute;
        bottom: 15px;
        right: 15px;
        font-size: 0.8rem;
        padding: 0.3rem 0.8rem;
        border-radius: 30px;
        font-weight: 600;
    }

    .package-regular {
        background-color: rgba(0, 0, 0, 0.6);
        color: white;
    }

    .package-premium {
        background-color: rgba(241, 196, 15, 0.9);
        color: #333;
    }

    .package-featured {
        background-color: rgba(52, 152, 219, 0.9);
        color: white;
    }

    .card-content {
        padding: 1.5rem;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .card-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var (--secondary-color);
    }

    .card-rating {
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    .rating-stars {
        color: #f1c40f;
        margin-right: 0.5rem;
    }

    .rating-count {
        color: #6c757d;
        font-size: 0.85rem;
    }

    .card-description {
        color: #6c757d;
        font-size: 0.95rem;
        margin-bottom: 1rem;
        flex-grow: 1;
    }

    .card-features {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .feature-tag {
        font-size: 0.8rem;
        color: #6c757d;
        background-color: #f8f9fa;
        padding: 0.2rem 0.6rem;
        border-radius: 30px;
    }

    .card-actions {
        display: flex;
        justify-content: space-between;
        margin-top: auto;
        padding-top: 1rem;
        border-top: 1px solid #f0f0f0;
    }

    .card-btn {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-size: 0.9rem;
        font-weight: 500;
        text-decoration: none;
        transition: var(--transition-normal);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .card-btn i {
        margin-right: 0.4rem;
    }

    .view-btn {
        background-color: var(--primary-light);
        color: var(--primary-color);
    }

    .view-btn:hover {
        background-color: var(--primary-color);
        color: white;
    }

    .contact-btn {
        background-color: #e9ecef;
        color: #495057;
    }

    .contact-btn:hover {
        background-color: #dee2e6;
        color: #212529;
    }

    /* List view */
    .business-list {
        display: none;
    }

    .business-list .business-card {
        display: flex;
        flex-direction: row;
        height: auto;
        margin-bottom: 1.5rem;
    }

    .business-list .card-image {
        width: 25%;
        height: auto;
        min-height: 200px;
    }

    .business-list .card-content {
        width: 75%;
    }

    /* Pagination */
    .pagination-container {
        margin-top: 3rem;
        display: flex;
        justify-content: center;
        position: relative;
    }

    .pagination {
        display: flex;
        list-style: none;
        padding: 0;
        margin: 0;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .page-item {
        background-color: white;
    }

    .page-item.active .page-link {
        background-color: var(--primary-color);
        color: white;
    }

    .page-item.disabled .page-link {
        color: #adb5bd;
        pointer-events: none;
    }

    .page-link {
        padding: 0.8rem 1.2rem;
        color: var(--secondary-color);
        text-decoration: none;
        transition: var(--transition-normal);
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 40px;
    }

    .page-link:hover {
        background-color: #e9ecef;
        color: var(--primary-color);
    }

    /* Loader */
    .loader-container {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255,255,255,0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        visibility: hidden;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .loader-container.active {
        visibility: visible;
        opacity: 1;
    }

    .loader {
        width: 60px;
        height: 60px;
        border: 5px solid rgba(52, 152, 219, 0.2);
        border-radius: 50%;
        border-top-color: var(--primary-color);
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Skeleton Loading */
    .skeleton-card {
        background-color: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: var(--card-shadow);
        height: 100%;
    }

    .skeleton-image {
        height: 180px;
        background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
        background-size: 200% 100%;
        animation: 1.5s shine linear infinite;
    }

    .skeleton-content {
        padding: 1.5rem;
    }

    .skeleton-title {
        height: 24px;
        width: 80%;
        background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
        background-size: 200% 100%;
        animation: 1.5s shine linear infinite;
        border-radius: 4px;
        margin-bottom: 0.5rem;
    }

    .skeleton-rating {
        height: 16px;
        width: 60%;
        background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
        background-size: 200% 100%;
        animation: 1.5s shine linear infinite;
        border-radius: 4px;
        margin-bottom: 1rem;
    }

    .skeleton-description {
        height: 16px;
        width: 100%;
        background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
        background-size: 200% 100%;
        animation: 1.5s shine linear infinite;
        border-radius: 4px;
        margin-bottom: 0.5rem;
    }

    .skeleton-description:last-of-type {
        width: 70%;
    }

    .skeleton-features {
        display: flex;
        gap: 0.5rem;
        margin: 1rem 0;
    }

    .skeleton-feature {
        height: 16px;
        width: 60px;
        background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
        background-size: 200% 100%;
        animation: 1.5s shine linear infinite;
        border-radius: 30px;
    }

    .skeleton-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #f0f0f0;
    }

    .skeleton-button {
        height: 34px;
        width: 100px;
        background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
        background-size: 200% 100%;
        animation: 1.5s shine linear infinite;
        border-radius: 6px;
    }

    @@keyframes shine {
        to {
            background-position-x: -200%;
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 992px) {
        .filter-panel {
            margin-bottom: 1.5rem;
        }
        .business-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
        .business-list .business-card {
            flex-direction: column;
        }
        .business-list .card-image {
            width: 100%;
            height: 180px;
        }
        .business-list .card-content {
            width: 100%;
        }
    }

    @@media (max-width: 768px) {
        .hero-title {
            font-size: 2rem;
        }
        .hero-subtitle {
            font-size: 1rem;
        }
        .filter-dropdown {
            flex: 1 1 100%;
        }
        .sort-options {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        .business-grid {
            grid-template-columns: 1fr;
        }
        .page-link {
            padding: 0.6rem 1rem;
        }
    }
</style>

<!-- Loading overlay -->
<div class="loader-container" id="loaderContainer">
    <div class="loader"></div>
</div>

<!-- Hero section with search -->
<section class="business-hero">
    <div class="container">
        <div class="hero-content">
            <h1 class="hero-title">Explore Our Vyrlo</h1>
            <p class="hero-subtitle">Find the perfect business for your needs from our curated collection</p>
            <div class="hero-search">
                <i class="fas fa-search"></i>
                <input type="text" id="heroSearch" placeholder="Search for businesses, categories, or features..." />
            </div>
        </div>
    </div>
</section>

<!-- Main content area -->
<section class="business-content">
    <div class="container">
        <!-- Filter panel -->
        <div class="filter-panel">
            <h3 class="filter-title"><i class="fas fa-filter"></i> Filter Results</h3>
            <div class="filter-row">
                <div class="filter-dropdown">
                    <select id="categoryFilter">
                        <option value="">All Categories</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
                <div class="filter-dropdown">
                    <select id="ratingFilter">
                        <option value="">Any Rating</option>
                        <option value="4">4+ Stars</option>
                        <option value="3">3+ Stars</option>
                        <option value="2">2+ Stars</option>
                        <option value="1">1+ Star</option>
                    </select>
                </div>
                <div class="filter-dropdown">
                    <select id="packageFilter">
                        <option value="">All Packages</option>
                        <option value="3">Featured</option>
                        <option value="2">Premium</option>
                        <option value="1">Regular</option>
                    </select>
                </div>
                <div class="filter-dropdown">
                    <select id="statusFilter">
                        <option value="">Any Status</option>
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </select>
                </div>
            </div>

            <div class="filter-chip-container" id="activeFilters">
                <!-- Active filters will appear here -->
            </div>

            <div class="filter-actions">
                <button class="clear-filters" id="clearFilters">
                    <i class="fas fa-times-circle"></i> Clear all filters
                </button>
                <button class="apply-filters" id="applyFilters">
                    <i class="fas fa-check mr-2"></i> Apply Filters
                </button>
            </div>
        </div>

        <!-- Results area -->
        <div class="business-count">
            Showing <strong id="visibleCount">@Model.Count</strong> of <strong id="totalCount">@totalItems</strong> businesses
        </div>

        <div class="sort-options">
            <div class="sort-by">
                <span>Sort by:</span>
                <div class="sort-by-container">
                    <select id="sortSelect">
                        <option value="nameAsc">Name (A-Z)</option>
                        <option value="nameDesc">Name (Z-A)</option>
                        <option value="ratingDesc">Highest Rating</option>
                        <option value="ratingAsc">Lowest Rating</option>
                        <option value="newest">Newest</option>
                        <option value="oldest">Oldest</option>
                    </select>
                </div>
            </div>
            <div class="view-options">
                <button id="gridViewBtn" class="active" title="Grid View">
                    <i class="fas fa-th"></i>
                </button>
                <button id="listViewBtn" title="List View">
                    <i class="fas fa-list"></i>
                </button>
            </div>
        </div>

        <!-- Business Grid -->
        <div class="business-grid" id="businessGrid">
            @if (Model != null && Model.Any())
            {
                foreach (var business in Model)
                {
                    <div class="business-card" data-id="@business.Id" 
                         data-name="@business.Name" 
                         data-category="@business.CategoryId"
                         data-rating="@(business.Reviews != null && business.Reviews.Any() ? business.Reviews.Average(r => r.Rating) : 0)"
                         data-status="@business.IsActive.ToString().ToLower()"
                         data-package="@business.PackageId">

                        <div class="card-image" style="background-image: url('@(string.IsNullOrEmpty(business.MainImage) ? "/images/default-business.jpg" : business.MainImage)')">
                            <div class="card-category">
                                <i class="@(business.Category?.Icon ?? "fas fa-store")"></i> @(business.Category?.Name ?? "General")
                            </div>
                            <div class="card-status @(business.IsActive ? "status-active" : "status-inactive")">
                                @(business.IsActive ? "Active" : "Inactive")
                            </div>
                            <div class="package-badge @(business.PackageId == 1 ? "package-regular" : business.PackageId == 2 ? "package-premium" : "package-featured")">
                                @(business.PackageId == 1 ? "Regular" : business.PackageId == 2 ? "Premium" : "Featured")
                            </div>
                        </div>

                        <div class="card-content">
                            <h3 class="card-title">@business.Name</h3>
                            
                            <div class="card-rating">
                                <div class="rating-stars">
                                    @{
                                        double rating = business.Reviews != null && business.Reviews.Any() ? 
                                            business.Reviews.Average(r => r.Rating) : 0;
                                        int fullStars = (int)Math.Floor(rating);
                                        bool hasHalfStar = rating - fullStars >= 0.5;
                                        int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                                        
                                        for (int i = 0; i < fullStars; i++)
                                        {
                                            <i class="fas fa-star"></i>
                                        }
                                        
                                        if (hasHalfStar)
                                        {
                                            <i class="fas fa-star-half-alt"></i>
                                        }
                                        
                                        for (int i = 0; i < emptyStars; i++)
                                        {
                                            <i class="far fa-star"></i>
                                        }
                                    }
                                </div>
                                <span class="rating-count">@rating.ToString("0.0") (@(business.Reviews?.Count() ?? 0) reviews)</span>
                            </div>
                            
                            <p class="card-description">
                                @(business.Description?.Length > 100 ? business.Description.Substring(0, 100) + "..." : business.Description)
                            </p>
                            
                            @if (business.BusinessFeatures != null && business.BusinessFeatures.Any())
                            {
                                <div class="card-features">
                                    @foreach (var feature in business.BusinessFeatures.Take(3))
                                    {
                                        <span class="feature-tag">@feature.Name</span>
                                    }
                                    @if (business.BusinessFeatures.Count() > 3)
                                    {
                                        <span class="feature-tag">+@(business.BusinessFeatures.Count() - 3) more</span>
                                    }
                                </div>
                            }
                            
                            <div class="card-actions">
                                <a href="/Business/GetBusinessById?id=@business.Id" class="card-btn view-btn">
                                    <i class="fas fa-eye"></i> View Details
                                </a>
                                <a href="#" class="card-btn contact-btn">
                                    <i class="fas fa-comment"></i> Contact
                                </a>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center py-5">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h3>No businesses found</h3>
                    <p class="text-muted">Try adjusting your filters or search terms.</p>
                </div>
            }
        </div>

        <!-- Business List (alternative view) -->
        <div class="business-list" id="businessList">
            <!-- Same content as grid view but styled differently -->
        </div>

        <!-- Pagination -->
        @if (totalPages > 1)
        {
            <div class="pagination-container">
                <ul class="pagination" id="pagination">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="javascript:void(0)" data-page="@(currentPage - 1)">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                    
                    @{
                        int startPage = Math.Max(1, currentPage - 2);
                        int endPage = Math.Min(totalPages, startPage + 4);
                        
                        if (startPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="javascript:void(0)" data-page="1">1</a>
                            </li>
                            
                            if (startPage > 2)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                        }
                        
                        for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="javascript:void(0)" data-page="@i">@i</a>
                            </li>
                        }
                        
                        if (endPage < totalPages)
                        {
                            if (endPage < totalPages - 1)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                            
                            <li class="page-item">
                                <a class="page-link" href="javascript:void(0)" data-page="@totalPages">@totalPages</a>
                            </li>
                        }
                    }
                    
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <a class="page-link" href="javascript:void(0)" data-page="@(currentPage + 1)">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                </ul>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const loaderContainer = document.getElementById('loaderContainer');
            const heroSearch = document.getElementById('heroSearch');
            const businessGrid = document.getElementById('businessGrid');
            const businessList = document.getElementById('businessList');
            const gridViewBtn = document.getElementById('gridViewBtn');
            const listViewBtn = document.getElementById('listViewBtn');
            const categoryFilter = document.getElementById('categoryFilter');
            const ratingFilter = document.getElementById('ratingFilter');
            const packageFilter = document.getElementById('packageFilter');
            const statusFilter = document.getElementById('statusFilter');
            const sortSelect = document.getElementById('sortSelect');
            const clearFiltersBtn = document.getElementById('clearFilters');
            const applyFiltersBtn = document.getElementById('applyFilters');
            const activeFiltersContainer = document.getElementById('activeFilters');
            const pagination = document.getElementById('pagination');
            const visibleCountElement = document.getElementById('visibleCount');
            const totalCountElement = document.getElementById('totalCount');
            
            let businesses = Array.from(document.querySelectorAll('.business-card'));
            let activeFilters = {};
            
            // Initialize list view (clone grid items)
            function initializeListView() {
                businessList.innerHTML = businessGrid.innerHTML;
                const listItems = businessList.querySelectorAll('.business-card');
                listItems.forEach(item => {
                    item.classList.add('list-view');
                });
            }
            
            // Toggle view mode
            gridViewBtn.addEventListener('click', function() {
                businessGrid.style.display = 'grid';
                businessList.style.display = 'none';
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
            });
            
            listViewBtn.addEventListener('click', function() {
                businessGrid.style.display = 'none';
                businessList.style.display = 'block';
                gridViewBtn.classList.remove('active');
                listViewBtn.classList.add('active');
            });
            
            // Debounce function for search
            function debounce(func, wait) {
                let timeout;
                return function(...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }
            
            // Filter businesses based on search and filter criteria
            function filterBusinesses() {
                // Show loading
                loaderContainer.classList.add('active');
                
                setTimeout(() => {
                    const searchTerm = heroSearch.value.toLowerCase();
                    
                    // Get filter values
                    const categoryValue = categoryFilter.value;
                    const ratingValue = parseFloat(ratingFilter.value) || 0;
                    const packageValue = packageFilter.value;
                    const statusValue = statusFilter.value;
                    
                    let visibleCount = 0;
                    
                    businesses.forEach(card => {
                        const businessName = card.getAttribute('data-name').toLowerCase();
                        const businessCategory = card.getAttribute('data-category');
                        const businessRating = parseFloat(card.getAttribute('data-rating')) || 0;
                        const businessStatus = card.getAttribute('data-status');
                        const businessPackage = card.getAttribute('data-package');
                        
                        // Match criteria
                        const matchesSearch = !searchTerm || businessName.includes(searchTerm);
                        const matchesCategory = !categoryValue || businessCategory === categoryValue;
                        const matchesRating = businessRating >= ratingValue;
                        const matchesPackage = !packageValue || businessPackage === packageValue;
                        const matchesStatus = !statusValue || businessStatus === statusValue;
                        
                        const isVisible = matchesSearch && matchesCategory && matchesRating && matchesPackage && matchesStatus;
                        
                        if (isVisible) {
                            card.style.display = '';
                            visibleCount++;
                        } else {
                            card.style.display = 'none';
                        }
                    });
                    
                    // Clone to list view
                    businessList.innerHTML = businessGrid.innerHTML;
                    
                    // Update visible count
                    visibleCountElement.textContent = visibleCount;
                    
                    // Hide loading
                    loaderContainer.classList.remove('active');
                    
                    // Update active filters display
                    updateActiveFilters();
                }, 300); // Simulated processing time
            }
            
            // Handle search input with debounce
            heroSearch.addEventListener('input', debounce(function() {
                filterBusinesses();
            }, 300));
            
            // Handle filter changes
            categoryFilter.addEventListener('change', function() {
                activeFilters.category = this.options[this.selectedIndex].text;
                if (!this.value) delete activeFilters.category;
            });
            
            ratingFilter.addEventListener('change', function() {
                activeFilters.rating = this.options[this.selectedIndex].text;
                if (!this.value) delete activeFilters.rating;
            });
            
            packageFilter.addEventListener('change', function() {
                activeFilters.package = this.options[this.selectedIndex].text;
                if (!this.value) delete activeFilters.package;
            });
            
            statusFilter.addEventListener('change', function() {
                activeFilters.status = this.options[this.selectedIndex].text;
                if (!this.value) delete activeFilters.status;
            });
            
            // Apply filters button
            applyFiltersBtn.addEventListener('click', function() {
                filterBusinesses();
            });
            
            // Clear all filters
            clearFiltersBtn.addEventListener('click', function() {
                // Reset all filters
                heroSearch.value = '';
                categoryFilter.value = '';
                ratingFilter.value = '';
                packageFilter.value = '';
                statusFilter.value = '';
                
                // Clear active filters
                activeFilters = {};
                activeFiltersContainer.innerHTML = '';
                
                // Reapply filters (show all)
                filterBusinesses();
            });
            
            // Update active filters display
            function updateActiveFilters() {
                activeFiltersContainer.innerHTML = '';
                
                Object.entries(activeFilters).forEach(([key, value]) => {
                    if (!value) return;
                    
                    const chip = document.createElement('div');
                    chip.className = 'filter-chip';
                    chip.innerHTML = `${value} <i class="fas fa-times" data-filter="${key}"></i>`;
                    
                    chip.querySelector('i').addEventListener('click', function() {
                        const filterType = this.getAttribute('data-filter');
                        
                        // Reset the corresponding filter
                        switch(filterType) {
                            case 'category':
                                categoryFilter.value = '';
                                break;
                            case 'rating':
                                ratingFilter.value = '';
                                break;
                            case 'package':
                                packageFilter.value = '';
                                break;
                            case 'status':
                                statusFilter.value = '';
                                break;
                        }
                        
                        // Remove from active filters
                        delete activeFilters[filterType];
                        
                        // Reapply filters
                        filterBusinesses();
                    });
                    
                    activeFiltersContainer.appendChild(chip);
                });
                
                // Show/hide the container based on whether there are active filters
                activeFiltersContainer.style.display = Object.keys(activeFilters).length ? 'flex' : 'none';
            }
            
            // Handle sorting
            sortSelect.addEventListener('change', function() {
                const sortValue = this.value;
                
                businesses.sort((a, b) => {
                    const nameA = a.getAttribute('data-name').toLowerCase();
                    const nameB = b.getAttribute('data-name').toLowerCase();
                    const ratingA = parseFloat(a.getAttribute('data-rating')) || 0;
                    const ratingB = parseFloat(b.getAttribute('data-rating')) || 0;
                    
                    switch(sortValue) {
                        case 'nameAsc':
                            return nameA.localeCompare(nameB);
                        case 'nameDesc':
                            return nameB.localeCompare(nameA);
                        case 'ratingDesc':
                            return ratingB - ratingA;
                        case 'ratingAsc':
                            return ratingA - ratingB;
                        // You would need additional data attributes for newest/oldest
                        default:
                            return 0;
                    }
                });
                
                // Reorder the DOM elements
                businesses.forEach(card => {
                    businessGrid.appendChild(card);
                });
                
                // Update list view
                initializeListView();
                
                // Re-apply filters
                filterBusinesses();
            });
            
            // Handle pagination
            if (pagination) {
                pagination.addEventListener('click', function(e) {
                    const pageLink = e.target.closest('.page-link');
                    
                    if (pageLink && !pageLink.parentElement.classList.contains('disabled')) {
                        const page = pageLink.getAttribute('data-page');
                        loadPage(page);
                    }
                });
            }
            
            // Load page data
            function loadPage(page) {
                // Show loading
                loaderContainer.classList.add('active');
                
                // Get current filters
                const searchTerm = heroSearch.value;
                const categoryValue = categoryFilter.value;
                const ratingValue = ratingFilter.value;
                const packageValue = packageFilter.value;
                const statusValue = statusFilter.value;
                const sortValue = sortSelect.value;
                
                // Build query parameters
                const params = new URLSearchParams();
                params.append('page', page);
                
                if (searchTerm) params.append('searchTerm', searchTerm);
                if (categoryValue) params.append('category', categoryValue);
                if (ratingValue) params.append('rating', ratingValue);
                if (packageValue) params.append('package', packageValue);
                if (statusValue) params.append('status', statusValue);
                if (sortValue) params.append('sort', sortValue);
                
                // Fetch businesses for the page
                fetch(`/Business/GetAll?${params.toString()}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                .then(response => response.text())
                .then(html => {
                    // Insert new content
                    businessGrid.innerHTML = html;
                    
                    // Update businesses array
                    businesses = Array.from(document.querySelectorAll('.business-card'));
                    
                    // Update list view
                    initializeListView();
                    
                    // Hide loading
                    loaderContainer.classList.remove('active');
                    
                    // Update current page in pagination
                    updatePagination(parseInt(page));
                })
                .catch(error => {
                    console.error('Error loading page:', error);
                    loaderContainer.classList.remove('active');
                });
            }
            
            // Update pagination UI
            function updatePagination(currentPage) {
                const pageItems = pagination.querySelectorAll('.page-item');
                
                pageItems.forEach(item => {
                    item.classList.remove('active');
                    
                    const pageLink = item.querySelector('.page-link');
                    if (pageLink && pageLink.getAttribute('data-page') == currentPage) {
                        item.classList.add('active');
                    }
                });
                
                // Update prev/next buttons
                const prevButton = pagination.querySelector('.page-item:first-child');
                const nextButton = pagination.querySelector('.page-item:last-child');
                
                if (prevButton) {
                    if (currentPage <= 1) {
                        prevButton.classList.add('disabled');
                    } else {
                        prevButton.classList.remove('disabled');
                        prevButton.querySelector('.page-link').setAttribute('data-page', currentPage - 1);
                    }
                }
                
                if (nextButton) {
                    const totalPages = parseInt(totalCountElement.getAttribute('data-total-pages'));
                    if (currentPage >= totalPages) {
                        nextButton.classList.add('disabled');
                    } else {
                        nextButton.classList.remove('disabled');
                        nextButton.querySelector('.page-link').setAttribute('data-page', currentPage + 1);
                    }
                }
            }
            
            // Initialize the page
            initializeListView();
        });
    </script>
}
