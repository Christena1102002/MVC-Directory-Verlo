@{
    ViewData["Title"] = "الدردشة مع الدعم الفني";
}

<div id="userChat" class="user-chat-container">
    <div class="card chat-card">
        <div class="card-header chat-header">
            <div class="chat-header-info">
                <i class="fas fa-headset chat-header-icon"></i>
                <div>
                    <h5 class="mb-0">الدعم الفني</h5>
                    <small id="supportStatus" class="text-muted">جاري الاتصال...</small>
                </div>
            </div>
        </div>
        
        <div class="card-body chat-body" id="chatMessagesContainer">
            <div class="chat-welcome">
                <div class="chat-welcome-icon">
                    <i class="fas fa-comment-dots"></i>
                </div>
                <h5>مرحبًا بك في خدمة الدعم الفني</h5>
                <p>يمكنك طرح أي استفسار وسيقوم فريق الدعم بالرد عليك في أقرب وقت ممكن.</p>
            </div>
            
            <div id="messagesPlaceholder"></div>
            
            <div id="typingIndicator" class="typing-indicator d-none">
                <div class="typing-indicator-bubble">
                    <div class="typing-indicator-dot"></div>
                    <div class="typing-indicator-dot"></div>
                    <div class="typing-indicator-dot"></div>
                </div>
                <div class="typing-indicator-text">جاري الكتابة...</div>
            </div>
        </div>
        
        <div class="card-footer chat-footer">
            <form id="messageForm" class="chat-form">
                <div class="input-group">
                    <input 
                        type="text" 
                        id="messageInput" 
                        class="form-control" 
                        placeholder="اكتب رسالتك هنا..." 
                        autocomplete="off"
                        required
                    >
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="submit">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Chat Container */
        .user-chat-container {
            max-width: 900px;
            margin: 2rem auto;
        }
        
        .chat-card {
            border: none;
            border-radius: 1rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            overflow: hidden;
            height: 75vh;
            max-height: 700px;
            display: flex;
            flex-direction: column;
        }
        
        /* Chat Header */
        .chat-header {
            background: linear-gradient(135deg, #2c6eff 0%, #1b5ce0 100%);
            color: white;
            padding: 1rem;
            border-bottom: none;
        }
        
        .chat-header-info {
            display: flex;
            align-items: center;
        }
        
        .chat-header-icon {
            background-color: rgba(255,255,255,0.2);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            margin-right: 1rem;
        }
        
        /* Chat Body */
        .chat-body {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
            background-color: #f8f9fa;
        }
        
        /* Welcome Message */
        .chat-welcome {
            text-align: center;
            margin: 2rem 0;
            padding: 2rem;
            background-color: white;
            border-radius: 1rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .chat-welcome-icon {
            width: 70px;
            height: 70px;
            background-color: #e7f0ff;
            color: #2c6eff;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            margin: 0 auto 1.5rem;
        }
        
        /* Messages */
        .message {
            display: flex;
            margin-bottom: 1rem;
            animation: fadeIn 0.3s ease;
        }
        
        .message-incoming {
            justify-content: flex-start;
        }
        
        .message-outgoing {
            justify-content: flex-end;
        }
        
        .message-bubble {
            max-width: 75%;
            padding: 0.75rem 1rem;
            border-radius: 1rem;
            position: relative;
        }
        
        .message-incoming .message-bubble {
            background-color: white;
            border-bottom-left-radius: 0;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .message-outgoing .message-bubble {
            background-color: #2c6eff;
            color: white;
            border-bottom-right-radius: 0;
        }
        
        .message-info {
            font-size: 0.75rem;
            margin-top: 0.25rem;
            display: flex;
            align-items: center;
        }
        
        .message-incoming .message-info {
            color: #999;
        }
        
        .message-outgoing .message-info {
            color: rgba(255,255,255,0.8);
            justify-content: flex-end;
        }
        
        .message-time {
            margin-right: 0.5rem;
        }
        
        .message-status {
            margin-left: 0.25rem;
        }
        
        /* Typing Indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
        }
        
        .typing-indicator-bubble {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 60px;
            height: 35px;
            background: white;
            border-radius: 1rem;
            border-bottom-left-radius: 0;
            margin-right: 0.5rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .typing-indicator-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: #999;
            margin: 0 2px;
            animation: typingAnimation 1.5s infinite ease-in-out;
        }
        
        .typing-indicator-dot:nth-child(1) { animation-delay: 0s; }
        .typing-indicator-dot:nth-child(2) { animation-delay: 0.3s; }
        .typing-indicator-dot:nth-child(3) { animation-delay: 0.6s; }
        
        .typing-indicator-text {
            color: #999;
            font-size: 0.8rem;
        }
        
        /* Chat Footer */
        .chat-footer {
            padding: 1rem;
            background-color: white;
            border-top: 1px solid rgba(0,0,0,0.05);
        }
        
        .chat-form .form-control {
            border-radius: 50px;
            padding-left: 1rem;
            height: 50px;
            border: 1px solid #e1e1e1;
        }
        
        .chat-form .form-control:focus {
            box-shadow: 0 0 0 3px rgba(44, 110, 255, 0.25);
            border-color: #2c6eff;
        }
        
        .chat-form .btn {
            border-radius: 50px;
            width: 50px;
            height: 50px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 0.5rem;
            background-color: #2c6eff;
            border-color: #2c6eff;
        }
        
        .chat-form .btn:hover {
            background-color: #1b5ce0;
            border-color: #1b5ce0;
            transform: scale(1.05);
        }
        
        /* Animation */
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @@keyframes typingAnimation {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        
        /* Scrollbar */
        .chat-body::-webkit-scrollbar {
            width: 6px;
        }
        
        .chat-body::-webkit-scrollbar-track {
            background: transparent;
        }
        
        .chat-body::-webkit-scrollbar-thumb {
            background-color: rgba(0,0,0,0.1);
            border-radius: 6px;
        }
        
        /* RTL Support */
        [dir="rtl"] .chat-header-icon {
            margin-right: 0;
            margin-left: 1rem;
        }
        
        [dir="rtl"] .message-incoming .message-bubble {
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 1rem;
        }
        
        [dir="rtl"] .message-outgoing .message-bubble {
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 1rem;
        }
        
        [dir="rtl"] .message-time {
            margin-right: 0;
            margin-left: 0.5rem;
        }
        
        [dir="rtl"] .typing-indicator-bubble {
            margin-right: 0;
            margin-left: 0.5rem;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 1rem;
        }
        
        [dir="rtl"] .chat-form .btn {
            margin-left: 0;
            margin-right: 0.5rem;
        }
        
        /* Responsive Adjustments */
        @@media (max-width: 768px) {
            .user-chat-container {
                margin: 1rem;
            }
            
            .chat-card {
                height: calc(100vh - 2rem);
                max-height: none;
                border-radius: 0.5rem;
            }
            
            .message-bubble {
                max-width: 85%;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .withAutomaticReconnect()
                .build();
            
            // DOM Elements
            const messageForm = document.getElementById('messageForm');
            const messageInput = document.getElementById('messageInput');
            const messagesContainer = document.getElementById('messagesPlaceholder');
            const typingIndicator = document.getElementById('typingIndicator');
            const supportStatus = document.getElementById('supportStatus');
            const chatBody = document.getElementById('chatMessagesContainer');
            
            // Current user info
            let currentUserId = "";
            
            // Get user info and load previous messages
            $.ajax({
                url: '/UserChat/GetUserInfo',
                type: 'GET',
                success: function(data) {
                    currentUserId = data.userId;
                    
                    // Load previous messages
                    loadPreviousMessages();
                },
                error: function(error) {
                    console.error('Error getting user info:', error);
                    toastMessage('حدث خطأ أثناء تحميل معلومات المستخدم', 'error');
                }
            });
            
            // Load previous messages
            function loadPreviousMessages() {
                $.ajax({
                    url: '/UserChat/GetPreviousMessages',
                    type: 'GET',
                    success: function(messages) {
                        if (messages && messages.length > 0) {
                            // Remove welcome message if we have previous messages
                            $('.chat-welcome').remove();
                            
                            // Add messages to chat
                            messages.forEach(function(message) {
                                addMessageToChat(message);
                            });
                            
                            // Scroll to bottom
                            scrollToBottom();
                        }
                    },
                    error: function(error) {
                        console.error('Error loading messages:', error);
                        toastMessage('حدث خطأ أثناء تحميل الرسائل السابقة', 'error');
                    }
                });
            }
            
            // Start connection
            connection.start()
                .then(function() {
                    console.log("Connected to SignalR Hub");
                    supportStatus.textContent = "متصل";
                    
                    // Join chat group
                    connection.invoke("JoinUserChat", currentUserId).catch(function(err) {
                        console.error(err);
                        supportStatus.textContent = "غير متصل";
                        toastMessage('فشل الاتصال بخدمة الدردشة', 'error');
                    });
                })
                .catch(function(err) {
                    console.error(err);
                    supportStatus.textContent = "غير متصل";
                    toastMessage('فشل الاتصال بخدمة الدردشة', 'error');
                });
            
            // Handle form submission
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const content = messageInput.value.trim();
                if (!content) return;
                
                // Clear input
                messageInput.value = '';
                
                // Send message to server
                connection.invoke("SendMessage", content).catch(function(err) {
                    console.error(err);
                    toastMessage('فشل إرسال الرسالة', 'error');
                });
            });
            
            // Handle typing indicator
            let typingTimeout;
            messageInput.addEventListener('input', function() {
                // Clear previous timeout
                clearTimeout(typingTimeout);
                
                // Send typing indicator
                connection.invoke("UserTyping", true).catch(function(err) {
                    console.error(err);
                });
                
                // Set timeout to stop typing indicator
                typingTimeout = setTimeout(function() {
                    connection.invoke("UserTyping", false).catch(function(err) {
                        console.error(err);
                    });
                }, 2000);
            });
            
            // Handle received message
            connection.on("ReceiveMessage", function(message) {
                // Hide typing indicator
                typingIndicator.classList.add('d-none');
                
                // Remove welcome message if it exists
                $('.chat-welcome').remove();
                
                // Add message to chat
                addMessageToChat(message);
                
                // Scroll to bottom
                scrollToBottom();
            });
            
            // Handle typing indicator
            connection.on("ShowTyping", function(isTyping) {
                if (isTyping) {
                    typingIndicator.classList.remove('d-none');
                    scrollToBottom();
                } else {
                    typingIndicator.classList.add('d-none');
                }
            });
            
            // Handle message read status
            connection.on("MessageRead", function(messageId) {
                const messageStatus = document.querySelector(`[data-message-id="${messageId}"] .message-status`);
                if (messageStatus) {
                    messageStatus.innerHTML = '<i class="fas fa-check-double"></i>';
                }
            });
            
            // Helper function to add message to chat
            function addMessageToChat(message) {
                const isOutgoing = message.senderId === currentUserId;
                const messageClass = isOutgoing ? 'message-outgoing' : 'message-incoming';
                const messageTime = new Date(message.sentAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const readStatus = message.isRead ? '<i class="fas fa-check-double"></i>' : '<i class="fas fa-check"></i>';
                
                const messageHtml = `
                    <div class="message ${messageClass}" data-message-id="${message.id}">
                        <div class="message-bubble">
                            ${message.content}
                            <div class="message-info">
                                <span class="message-time">${messageTime}</span>
                                ${isOutgoing ? `<span class="message-status">${readStatus}</span>` : ''}
                            </div>
                        </div>
                    </div>
                `;
                
                messagesContainer.insertAdjacentHTML('beforeend', messageHtml);
            }
            
            // Helper function to scroll to bottom
            function scrollToBottom() {
                chatBody.scrollTop = chatBody.scrollHeight;
            }
            
            // Helper function to show toast messages
            function toastMessage(message, type) {
                // You can implement a toast notification system here
                // or use existing toast implementation from your project
                console.log(`${type}: ${message}`);
            }
            
            // Handle connection state changes
            connection.onreconnecting(() => {
                supportStatus.textContent = "جاري إعادة الاتصال...";
            });
            
            connection.onreconnected(() => {
                supportStatus.textContent = "متصل";
                
                // Rejoin chat group
                connection.invoke("JoinUserChat", currentUserId).catch(function(err) {
                    console.error(err);
                });
            });
            
            connection.onclose(() => {
                supportStatus.textContent = "غير متصل";
            });
        });
    </script>
}

