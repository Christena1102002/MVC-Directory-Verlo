@model IEnumerable<Business>
@{
    ViewData["Title"] = "Businesses Management";
    Layout = "_AdminLayout";
}

<div class="page-title">
    <h1>Businesses Management</h1>
    <p>Manage all registered businesses in the system</p>
</div>

<div class="card">
    <div class="card-header">
        <h5 class="card-title">Businesses List</h5>
        <div>
            <a href="@Url.Action("Add", "BusinessAdmin")" class="btn btn-primary">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                    <line x1="12" y1="5" x2="12" y2="19"></line>
                    <line x1="5" y1="12" x2="19" y2="12"></line>
                </svg>
                Add New Business
            </a>
        </div>
    </div>
    
    <div class="card-body">
        <div class="filter-row">
            <div class="filter-item search-box">
                <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
                <input type="text" id="searchInput" class="form-control search-input" placeholder="Search businesses...">
            </div>
            <div class="filter-item">
                <select id="statusFilter" class="form-select">
                    <option value="">All Status</option>
                    <option value="active">Active</option>
                    <option value="disabled">Disabled</option>
                </select>
            </div>
            <div class="filter-item">
                <select id="packageFilter" class="form-select">
                    <option value="">All Packages</option>
                    <option value="1">Regular</option>
                    <option value="2">Premium</option>
                    <option value="3">Enterprise</option>
                </select>
            </div>
            <div class="filter-item ms-auto">
                <button class="btn btn-outline-secondary" id="clearFilters">Clear Filters</button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="admin-table" id="businessesTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Owner</th>
                        <th>Package</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var business in Model)
                    {
                        <tr>
                            <td>@business.Name</td>
                            <td>@(business.CategoryId)</td>
                            <td>@(business.Owner)</td>
                            <td>
                                @switch (business.PackageId)
                                {
                                    case 1:
                                        <span>Regular</span>
                                        break;
                                    case 2:
                                        <span class="text-info">Premium</span>
                                        break;
                                    case 3:
                                        <span class="text-warning">Enterprise</span>
                                        break;
                                    default:
                                        <span>Unknown</span>
                                        break;
                                }
                            </td>
                            <td>
                                @if (business.IsActive)
                                {
                                    <span class="status-badge status-active">Active</span>
                                }
                                else
                                {
                                    <span class="status-badge status-disabled">Disabled</span>
                                }
                            </td>
                            <td>
                                <div class="d-flex gap-2">
                                    <a href="@Url.Action("Edit", "BusinessAdmin", new { id = business.Id })" class="btn btn-sm btn-outline-primary">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M12 20h9"></path>
                                            <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
                                        </svg>
                                    </a>
                                    <a href="@Url.Action("GetBusinessById", "BusinessAdmin", new { id = business.Id })" class="btn btn-sm btn-outline-info">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                            <circle cx="12" cy="12" r="3"></circle>
                                        </svg>
                                    </a>
                                    <button class="btn btn-sm btn-outline-danger delete-btn" data-id="@business.Id" data-name="@business.Name">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M3 6h18"></path>
                                            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                            <line x1="10" y1="11" x2="10" y2="17"></line>
                                            <line x1="14" y1="11" x2="14" y2="17"></line>
                                        </svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <span id="businessName" class="fw-bold"></span>?
                <p class="text-danger mt-2">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <a href="#" id="confirmDeleteBtn" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize DataTable
            const dataTable = new simpleDatatables.DataTable("#businessesTable", {
                searchable: true,
                fixedHeight: true,
                perPage: 10,
                columns: [
                    { select: 5, sortable: false }
                ],
                labels: {
                    placeholder: "Search...",
                    perPage: "{select} entries per page",
                    noRows: "No businesses found",
                    info: "Showing {start} to {end} of {rows} entries"
                }
            });
            
            // Handle search input
            $('#searchInput').on('keyup', function() {
                dataTable.search($(this).val());
            });
            
            // Handle status filter
            $('#statusFilter').on('change', function() {
                const value = $(this).val().toLowerCase();
                dataTable.columns().search(4, value);
            });
            
            // Handle package filter
            $('#packageFilter').on('change', function() {
                const value = $(this).val().toLowerCase();
                dataTable.columns().search(3, value);
            });
            
            // Clear filters
            $('#clearFilters').on('click', function() {
                $('#searchInput').val('');
                $('#statusFilter').val('');
                $('#packageFilter').val('');
                dataTable.search('');
                dataTable.columns().search('');
            });
            
            // Delete modal
            $('.delete-btn').on('click', function() {
                const id = $(this).data('id');
                const name = $(this).data('name');
                $('#businessName').text(name);
                $('#confirmDeleteBtn').attr('href', '@Url.Action("Delete", "BusinessAdmin")/' + id);
                $('#deleteModal').modal('show');
            });
            
            // Show success message if exists
            @if (TempData["Success"] != null)
            {
                <text>
                    showToast('Success', '@TempData["Success"]', 'success');
                </text>
            }
            
            // Show error message if exists
            @if (TempData["Error"] != null)
            {
                <text>
                    showToast('Error', '@TempData["Error"]', 'danger');
                </text>
            }
        });
        
        // Toast notification function
        function showToast(title, message, type) {
            const toastContainer = document.createElement('div');
            toastContainer.className = 'position-fixed top-0 end-0 p-3';
            toastContainer.style.zIndex = 1080;
            
            const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
            
            toastContainer.innerHTML = `
                <div class="toast align-items-center text-white ${bgClass} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            <strong>${title}:</strong> ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(toastContainer);
            
            const toastElement = toastContainer.querySelector('.toast');
            const toast = new bootstrap.Toast(toastElement, { delay: 5000 });
            toast.show();
            
            toastElement.addEventListener('hidden.bs.toast', function() {
                document.body.removeChild(toastContainer);
            });
        }
    </script>
}
