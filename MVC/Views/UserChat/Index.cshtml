@{
    ViewData["Title"] = "Chat with Technical Support";
}

<div id="userChat" class="user-chat-container">
    <div class="card chat-card">
        <div class="card-header chat-header">
            <div class="chat-header-info">
                <i class="fas fa-headset chat-header-icon"></i>
                <div>
                    <h5 class="mb-0">Technical Support</h5>
                    <small id="supportStatus" class="text-muted">Connecting...</small>
                </div>
            </div>
        </div>
        
        <div class="card-body chat-body" id="chatMessagesContainer">
            <div class="chat-welcome">
                <div class="chat-welcome-icon">
                    <i class="fas fa-comment-dots"></i>
                </div>
                <h5>Welcome to Technical Support</h5>
                <p>You can ask any question and our support team will respond as soon as possible.</p>
            </div>
            
            <div id="messagesPlaceholder"></div>
            
            <div id="typingIndicator" class="typing-indicator d-none">
                <div class="typing-indicator-bubble">
                    <div class="typing-indicator-dot"></div>
                    <div class="typing-indicator-dot"></div>
                    <div class="typing-indicator-dot"></div>
                </div>
                <div class="typing-indicator-text">Typing...</div>
            </div>
        </div>
        
        <div class="card-footer chat-footer">
            <form id="messageForm" class="chat-form">
                <div class="input-group">
                    <input 
                        type="text" 
                        id="messageInput" 
                        class="form-control" 
                        placeholder="Type your message here..." 
                        autocomplete="off"
                        required
                    >
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="submit">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="~/css/chat.css">
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .withAutomaticReconnect()
                .build();
            
            // DOM Elements
            const messageForm = document.getElementById('messageForm');
            const messageInput = document.getElementById('messageInput');
            const messagesContainer = document.getElementById('messagesPlaceholder');
            const typingIndicator = document.getElementById('typingIndicator');
            const supportStatus = document.getElementById('supportStatus');
            const chatBody = document.getElementById('chatMessagesContainer');
            
            // Current user info
            let currentUserId = "";
            
            // Get user info and load previous messages
            $.ajax({
                url: '/UserChat/GetUserInfo',
                type: 'GET',
                success: function(data) {
                    currentUserId = data.userId;
                    
                    // Load previous messages
                    loadPreviousMessages();
                },
                error: function(error) {
                    console.error('Error getting user info:', error);
                    toastMessage('Error loading user information', 'error');
                }
            });
            
            // Load previous messages
            function loadPreviousMessages() {
                $.ajax({
                    url: '/UserChat/GetPreviousMessages',
                    type: 'GET',
                    success: function(messages) {
                        if (messages && messages.length > 0) {
                            // Remove welcome message if we have previous messages
                            $('.chat-welcome').remove();
                            
                            // Add messages to chat
                            messages.forEach(function(message) {
                                addMessageToChat(message);
                            });
                            
                            // Scroll to bottom
                            scrollToBottom();
                        }
                    },
                    error: function(error) {
                        console.error('Error loading messages:', error);
                        toastMessage('Error loading previous messages', 'error');
                    }
                });
            }
            
            // Start connection
            connection.start()
                .then(function() {
                    console.log("Connected to SignalR Hub");
                    supportStatus.textContent = "Connected";
                    
                    // Join chat group
                    connection.invoke("JoinUserChat", currentUserId).catch(function(err) {
                        console.error(err);
                        supportStatus.textContent = "Disconnected";
                        toastMessage('Failed to connect to chat service', 'error');
                    });
                })
                .catch(function(err) {
                    console.error(err);
                    supportStatus.textContent = "Disconnected";
                    toastMessage('Failed to connect to chat service', 'error');
                });
            
            // Handle form submission
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const content = messageInput.value.trim();
                if (!content) return;
                
                // Clear input
                messageInput.value = '';
                
                // Send message to server
                connection.invoke("SendMessage", content).catch(function(err) {
                    console.error(err);
                    toastMessage('Failed to send message', 'error');
                });
            });
            
            // Handle typing indicator
            let typingTimeout;
            messageInput.addEventListener('input', function() {
                // Clear previous timeout
                clearTimeout(typingTimeout);
                
                // Send typing indicator
                connection.invoke("UserTyping", true).catch(function(err) {
                    console.error(err);
                });
                
                // Set timeout to stop typing indicator
                typingTimeout = setTimeout(function() {
                    connection.invoke("UserTyping", false).catch(function(err) {
                        console.error(err);
                    });
                }, 2000);
            });
            
            // Handle received message
            connection.on("ReceiveMessage", function(message) {
                // Hide typing indicator
                typingIndicator.classList.add('d-none');
                
                // Remove welcome message if it exists
                $('.chat-welcome').remove();
                
                // Add message to chat
                addMessageToChat(message);
                
                // Scroll to bottom
                scrollToBottom();
            });
            
            // Handle typing indicator
            connection.on("ShowTyping", function(isTyping) {
                if (isTyping) {
                    typingIndicator.classList.remove('d-none');
                    scrollToBottom();
                } else {
                    typingIndicator.classList.add('d-none');
                }
            });
            
            // Handle message read status
            connection.on("MessageRead", function(messageId) {
                const messageStatus = document.querySelector(`[data-message-id="${messageId}"] .message-status`);
                if (messageStatus) {
                    messageStatus.innerHTML = '<i class="fas fa-check-double"></i>';
                }
            });
            
            // Helper function to add message to chat
            function addMessageToChat(message) {
                const isOutgoing = message.senderId === currentUserId;
                const messageClass = isOutgoing ? 'message-outgoing' : 'message-incoming';
                const messageTime = new Date(message.sentAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const readStatus = message.isRead ? '<i class="fas fa-check-double"></i>' : '<i class="fas fa-check"></i>';
                
                const messageHtml = `
                    <div class="message ${messageClass}" data-message-id="${message.id}">
                        <div class="message-bubble">
                            ${message.content}
                            <div class="message-info">
                                <span class="message-time">${messageTime}</span>
                                ${isOutgoing ? `<span class="message-status">${readStatus}</span>` : ''}
                            </div>
                        </div>
                    </div>
                `;
                
                messagesContainer.insertAdjacentHTML('beforeend', messageHtml);
            }
            
            // Helper function to scroll to bottom
            function scrollToBottom() {
                chatBody.scrollTop = chatBody.scrollHeight;
            }
            
            // Helper function to show toast messages
            function toastMessage(message, type) {
                // You can implement a toast notification system here
                // or use existing toast implementation from your project
                console.log(`${type}: ${message}`);
            }
            
            // Handle connection state changes
            connection.onreconnecting(() => {
                supportStatus.textContent = "Reconnecting...";
            });
            
            connection.onreconnected(() => {
                supportStatus.textContent = "Connected";
                
                // Rejoin chat group
                connection.invoke("JoinUserChat", currentUserId).catch(function(err) {
                    console.error(err);
                });
            });
            
            connection.onclose(() => {
                supportStatus.textContent = "Disconnected";
            });
        });
    </script>
}
